/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package ru.investflow.mql;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import ru.investflow.mql.psi.MQL4Elements;

@SuppressWarnings({"ALL"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>MQL4Lexer.flex</tt>
 */
class MQL4Lexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13728 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\10\1\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\23\12\12\1\24\1\12"+
    "\1\25\1\24\1\12\1\26\4\1\1\12\1\27\1\30\2\1\2\12\1\27\1\1\1\31\1\24\5\12\1"+
    "\32\1\33\1\34\1\1\1\35\1\12\1\1\1\36\5\12\1\37\1\40\1\41\1\12\1\27\1\42\1"+
    "\12\1\43\1\44\1\1\1\12\1\45\4\1\1\12\1\46\4\1\1\47\2\12\1\50\1\1\1\51\1\52"+
    "\1\24\1\53\1\54\1\55\1\56\1\57\1\60\1\52\1\15\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\64\1\65\1\66\1\21\1\55\1\67\1\1\1\70\1\52\1\71\1\72\1\54\1\55\1\67\1\1"+
    "\1\60\1\52\1\40\1\73\1\74\1\75\1\76\1\1\1\70\1\64\1\1\1\77\1\35\1\55\1\50"+
    "\1\1\1\100\1\52\1\1\1\77\1\35\1\55\1\101\1\1\1\57\1\52\1\102\1\77\1\35\1\12"+
    "\1\103\1\57\1\104\1\52\1\105\1\106\1\107\1\12\1\110\1\111\1\1\1\64\1\1\1\24"+
    "\2\12\1\112\1\111\1\113\2\1\1\114\1\115\1\116\1\117\1\120\1\121\2\1\1\70\1"+
    "\1\1\113\1\1\1\122\1\12\1\123\1\1\1\124\7\1\2\12\1\27\1\104\1\113\1\125\1"+
    "\126\1\127\1\130\1\113\2\12\1\131\2\12\1\132\24\12\1\133\1\134\2\12\1\133"+
    "\2\12\1\135\1\136\1\13\3\12\1\136\3\12\1\27\2\1\1\12\1\1\5\12\1\137\1\24\45"+
    "\12\1\140\1\12\1\24\1\27\4\12\1\27\1\141\1\142\1\15\1\12\1\15\1\12\1\15\1"+
    "\142\1\70\3\12\1\143\1\1\1\144\1\113\2\1\1\113\5\12\1\26\2\12\1\145\4\12\1"+
    "\37\1\12\1\146\2\1\1\64\1\12\1\147\1\46\2\12\1\150\1\12\1\76\1\113\2\1\1\12"+
    "\1\111\3\12\1\46\2\1\2\113\1\151\5\1\1\106\2\12\1\143\1\152\1\113\2\1\1\153"+
    "\1\12\1\154\1\41\2\12\1\37\1\1\2\12\1\143\1\1\1\155\1\41\1\12\1\147\6\1\1"+
    "\156\1\157\14\12\4\1\21\12\1\137\2\12\1\137\1\160\1\12\1\147\3\12\1\161\1"+
    "\162\1\163\1\123\1\162\7\1\1\164\1\1\1\123\6\1\1\165\1\166\1\167\1\170\1\171"+
    "\3\1\1\172\147\1\2\12\1\146\2\12\1\146\10\12\1\173\1\174\2\12\1\131\3\12\1"+
    "\175\1\1\1\12\1\111\4\176\4\1\1\104\35\1\1\177\2\1\1\200\1\24\4\12\1\201\1"+
    "\24\4\12\1\132\1\106\1\12\1\147\1\24\4\12\1\146\1\1\1\12\1\27\3\1\1\12\40"+
    "\1\133\12\1\37\4\1\135\12\1\37\2\1\10\12\1\123\4\1\2\12\1\147\20\12\1\123"+
    "\1\12\1\202\1\1\2\12\1\146\1\104\1\12\1\147\4\12\1\37\2\1\1\203\1\204\5\12"+
    "\1\205\1\12\1\147\1\26\3\1\1\203\1\206\1\12\1\30\1\1\3\12\1\143\1\204\2\12"+
    "\1\143\1\1\1\113\1\1\1\207\1\41\1\12\1\37\1\12\1\111\1\1\1\12\1\123\1\47\2"+
    "\12\1\30\1\104\1\113\1\210\1\211\2\12\1\45\1\1\1\212\1\113\1\12\1\213\3\12"+
    "\1\214\1\215\1\216\1\27\1\65\1\217\1\220\1\176\2\12\1\132\1\37\7\12\1\30\1"+
    "\113\72\12\1\143\1\12\1\221\2\12\1\150\20\1\26\12\1\147\6\12\1\76\2\1\1\111"+
    "\1\222\1\55\1\223\1\224\6\12\1\15\1\1\1\153\25\12\1\147\1\1\4\12\1\204\2\12"+
    "\1\26\2\1\1\150\7\1\1\210\7\12\1\123\1\1\1\113\1\24\1\27\1\24\1\27\1\225\4"+
    "\12\1\146\1\226\1\227\2\1\1\230\1\12\1\13\1\231\2\147\2\1\7\12\1\27\30\1\1"+
    "\12\1\123\3\12\1\70\2\1\2\12\1\1\1\12\1\232\2\12\1\37\1\12\1\147\2\12\1\233"+
    "\3\1\11\12\1\147\1\113\5\1\2\12\1\26\3\12\1\143\11\1\23\12\1\111\1\12\1\37"+
    "\1\26\11\1\1\234\2\12\1\235\1\12\1\37\1\12\1\111\1\12\1\146\4\1\1\12\1\236"+
    "\1\12\1\37\1\12\1\76\4\1\3\12\1\237\4\1\1\70\1\240\1\12\1\143\2\1\1\12\1\123"+
    "\1\12\1\123\2\1\1\122\1\12\1\46\1\1\3\12\1\37\1\12\1\37\1\12\1\30\1\12\1\15"+
    "\6\1\4\12\1\45\3\1\3\12\1\30\3\12\1\30\60\1\1\153\2\12\1\26\2\1\1\64\1\1\1"+
    "\153\2\12\2\1\1\12\1\45\1\113\1\153\1\12\1\111\1\64\1\1\2\12\1\241\1\153\2"+
    "\12\1\30\1\242\1\243\2\1\1\12\1\21\1\150\5\1\1\244\1\245\1\45\2\12\1\146\1"+
    "\1\1\113\1\72\1\54\1\55\1\67\1\1\1\246\1\15\21\1\3\12\1\1\1\247\1\113\12\1"+
    "\2\12\1\146\2\1\1\250\2\1\3\12\1\1\1\251\1\113\2\1\2\12\1\27\1\1\1\113\3\1"+
    "\1\12\1\76\1\1\1\113\26\1\4\12\1\113\1\104\34\1\3\12\1\45\20\1\71\12\1\76"+
    "\16\1\14\12\1\143\53\1\2\12\1\146\75\1\44\12\1\111\33\1\43\12\1\45\1\12\1"+
    "\146\1\113\6\1\1\12\1\147\1\1\3\12\1\1\1\143\1\113\1\153\1\252\1\12\67\1\4"+
    "\12\1\46\1\70\3\1\1\153\6\1\1\15\77\1\6\12\1\27\1\123\1\45\1\76\66\1\5\12"+
    "\1\210\3\12\1\142\1\253\1\254\1\255\3\12\1\256\1\257\1\12\1\260\1\261\1\35"+
    "\24\12\1\262\1\12\1\35\1\132\1\12\1\132\1\12\1\210\1\12\1\210\1\146\1\12\1"+
    "\146\1\12\1\55\1\12\1\55\1\12\1\263\3\264\14\12\1\46\123\1\1\255\1\12\1\265"+
    "\1\266\1\267\1\270\1\271\1\272\1\273\1\150\1\274\1\150\24\1\55\12\1\111\2"+
    "\1\103\12\1\46\15\12\1\147\150\12\1\15\25\1\41\12\1\147\36\1");

  /* The ZZ_CMAP_A table has 3024 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\33\1\2\1\0\1\33\1\1\22\0\1\3\1\0\1\11\1\62\1\17\2\0\1\21\1\65\1\66"+
    "\1\10\1\44\1\75\1\16\1\15\1\7\1\23\11\37\1\74\1\73\1\14\1\64\1\20\1\22\1\0"+
    "\4\41\1\43\1\41\5\4\1\34\10\4\1\36\2\4\1\40\2\4\1\71\1\12\1\72\1\0\1\6\1\0"+
    "\1\24\1\25\1\47\1\42\1\52\1\26\1\55\1\50\1\53\1\4\1\60\1\46\1\54\1\27\1\45"+
    "\1\57\1\4\1\30\1\51\1\31\1\35\1\32\1\13\1\56\1\63\1\61\1\67\1\0\1\70\14\0"+
    "\1\4\12\0\1\4\4\0\1\4\5\0\27\4\1\0\12\4\4\0\14\4\16\0\5\4\7\0\1\4\1\0\1\4"+
    "\1\0\5\4\1\0\2\4\2\0\4\4\1\0\1\4\6\0\1\4\1\0\3\4\1\0\1\4\1\0\4\4\1\0\23\4"+
    "\1\0\13\4\10\0\6\4\1\0\26\4\2\0\1\4\6\0\10\4\10\0\13\4\5\0\3\4\15\0\12\5\4"+
    "\0\6\4\1\0\1\4\17\0\2\4\7\0\2\4\12\5\3\4\2\0\2\4\1\0\16\4\15\0\11\4\13\0\1"+
    "\4\16\0\12\5\6\4\4\0\2\4\4\0\1\4\5\0\6\4\4\0\1\4\11\0\1\4\3\0\1\4\7\0\11\4"+
    "\7\0\5\4\17\0\26\4\3\0\1\4\2\0\1\4\7\0\12\4\4\0\12\5\1\4\4\0\10\4\2\0\2\4"+
    "\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4\3\0\1\4\20\0\1\4\15\0\2\4\1\0\1\4\5\0\6"+
    "\4\4\0\2\4\1\0\2\4\1\0\2\4\1\0\2\4\17\0\4\4\1\0\1\4\7\0\12\5\2\0\3\4\20\0"+
    "\11\4\1\0\2\4\1\0\2\4\1\0\5\4\3\0\1\4\2\0\1\4\30\0\1\4\13\0\10\4\2\0\1\4\3"+
    "\0\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0"+
    "\14\4\13\0\10\4\1\0\2\4\10\0\3\4\5\0\4\4\1\0\5\4\3\0\1\4\3\0\2\4\15\0\13\4"+
    "\2\0\1\4\21\0\1\4\12\0\6\4\5\0\22\4\3\0\10\4\1\0\11\4\1\0\1\4\2\0\7\4\11\0"+
    "\1\4\1\0\2\4\14\0\12\5\7\0\2\4\1\0\1\4\2\0\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0"+
    "\7\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0\4\4\1\0\2\4\11\0\1\4\2\0\5\4\1\0"+
    "\1\4\11\0\12\5\2\0\14\4\1\0\24\4\13\0\5\4\3\0\6\4\4\0\4\4\3\0\1\4\3\0\2\4"+
    "\7\0\3\4\4\0\15\4\14\0\1\4\1\0\6\4\1\0\1\4\5\0\1\4\2\0\13\4\1\0\15\4\1\0\4"+
    "\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\1\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\16"+
    "\4\2\0\6\4\2\0\15\4\2\0\1\4\1\0\10\4\7\0\15\4\1\0\6\4\23\0\1\4\4\0\1\4\3\0"+
    "\11\4\1\0\1\4\5\0\17\4\1\0\16\4\2\0\14\4\13\0\1\4\15\0\7\4\7\0\16\4\15\0\2"+
    "\4\12\5\3\0\3\4\11\0\4\4\1\0\4\4\3\0\2\4\11\0\10\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\6\4\1\0\7\4\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0\6\4\5\0\1\4\15\0\1\4"+
    "\2\0\1\4\4\0\1\4\2\0\12\4\1\0\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0\1\4\1\0\4\4"+
    "\1\0\13\4\2\0\4\4\5\0\5\4\4\0\1\4\4\0\2\4\13\0\5\4\6\0\4\4\3\0\2\4\14\0\10"+
    "\4\7\0\10\4\1\0\7\4\6\0\2\4\12\0\5\4\5\0\2\4\3\0\7\4\6\0\3\4\12\5\2\4\13\0"+
    "\11\4\2\0\27\4\2\0\7\4\1\0\3\4\1\0\4\4\1\0\4\4\2\0\6\4\3\0\1\4\1\0\1\4\2\0"+
    "\5\4\1\0\12\4\12\5\5\4\1\0\3\4\1\0\10\4\4\0\7\4\3\0\1\4\3\0\2\4\1\0\1\4\3"+
    "\0\2\4\2\0\5\4\2\0\1\4\1\0\1\4\30\0\3\4\3\0\6\4\2\0\6\4\2\0\6\4\11\0\7\4\4"+
    "\0\5\4\3\0\5\4\5\0\1\4\1\0\10\4\1\0\5\4\1\0\1\4\1\0\2\4\1\0\2\4\1\0\12\4\6"+
    "\0\12\4\2\0\6\4\2\0\6\4\2\0\6\4\2\0\3\4\3\0\14\4\1\0\16\4\1\0\2\4\1\0\2\4"+
    "\1\0\10\4\6\0\4\4\4\0\16\4\2\0\1\4\1\0\14\4\1\0\2\4\3\0\1\4\2\0\4\4\1\0\2"+
    "\4\12\0\10\4\6\0\6\4\1\0\3\4\1\0\12\4\3\0\1\4\12\0\4\4\13\0\12\5\1\4\1\0\1"+
    "\4\3\0\7\4\1\0\1\4\1\0\4\4\1\0\17\4\1\0\2\4\14\0\3\4\4\0\2\4\1\0\1\4\20\0"+
    "\4\4\10\0\1\4\13\0\10\4\5\0\3\4\2\0\1\4\2\0\2\4\2\0\4\4\1\0\14\4\1\0\1\4\1"+
    "\0\7\4\1\0\21\4\1\0\4\4\2\0\10\4\1\0\7\4\1\0\14\4\1\0\4\4\1\0\5\4\1\0\1\4"+
    "\3\0\14\4\2\0\13\4\1\0\10\4\2\0\22\5\1\0\2\4\1\0\1\4\2\0\1\4\1\0\12\4\1\0"+
    "\4\4\1\0\1\4\1\0\1\4\6\0\1\4\4\0\1\4\1\0\1\4\1\0\1\4\1\0\3\4\1\0\2\4\1\0\1"+
    "\4\2\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\2\4\1\0\1\4\2\0\4\4\1\0\7\4"+
    "\1\0\4\4\1\0\4\4\1\0\1\4\1\0\12\4\1\0\5\4\1\0\3\4\1\0\5\4\1\0\5\4");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\1\1\4\1\5"+
    "\1\6\1\7\1\1\1\10\5\4\1\10\6\4\1\1"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\2\0\1\24\1\0\1\4\1\0"+
    "\1\25\1\0\1\26\4\0\2\10\2\0\13\4\1\10"+
    "\1\4\1\27\15\4\1\30\1\4\4\0\2\23\1\0"+
    "\1\24\1\4\1\31\2\10\1\26\1\0\3\4\1\32"+
    "\30\4\1\33\1\4\5\0\1\34\1\0\2\4\1\35"+
    "\2\4\1\36\1\37\3\4\1\40\3\4\1\41\1\42"+
    "\4\4\1\43\6\4\1\44\1\45\2\4\6\0\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\5\4\1\54\1\55"+
    "\1\56\4\4\1\57\2\4\1\60\5\0\1\34\1\61"+
    "\1\4\1\62\2\4\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\4\0\1\4\1\72\1\4\1\73\1\0"+
    "\1\74\1\0\1\75\1\76\1\77\1\0\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\76\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364"+
    "\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554"+
    "\0\u0592\0\u05d0\0\76\0\76\0\76\0\76\0\76\0\76"+
    "\0\76\0\76\0\76\0\76\0\u060e\0\u064c\0\u0174\0\u068a"+
    "\0\u06c8\0\u0706\0\u01f0\0\76\0\u0744\0\u0782\0\u07c0\0\u07fe"+
    "\0\u022e\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0"+
    "\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0"+
    "\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90"+
    "\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80"+
    "\0\u0fbe\0\370\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132"+
    "\0\76\0\u1170\0\76\0\u11ae\0\76\0\76\0\u11ec\0\u122a"+
    "\0\u122a\0\u1268\0\u12a6\0\u12e4\0\370\0\u1322\0\u1360\0\u139e"+
    "\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e"+
    "\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e"+
    "\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4\0\370\0\u18f2\0\u1930"+
    "\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\76\0\u1a66\0\u1aa4\0\u1ae2"+
    "\0\370\0\u1b20\0\u1b5e\0\370\0\370\0\u1b9c\0\u1bda\0\u1c18"+
    "\0\370\0\u1c56\0\u1c94\0\u1cd2\0\370\0\370\0\u1d10\0\u1d4e"+
    "\0\u1d8c\0\u1dca\0\370\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00"+
    "\0\u1f3e\0\370\0\370\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074"+
    "\0\u20b2\0\u20f0\0\u212e\0\370\0\370\0\370\0\370\0\370"+
    "\0\370\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\370\0\370"+
    "\0\370\0\u22a2\0\u22e0\0\u231e\0\u235c\0\370\0\u239a\0\u23d8"+
    "\0\370\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e\0\u064c\0\370"+
    "\0\u254c\0\370\0\u258a\0\u25c8\0\370\0\370\0\370\0\370"+
    "\0\370\0\370\0\76\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe"+
    "\0\370\0\u273c\0\76\0\u277a\0\76\0\u27b8\0\370\0\370"+
    "\0\76\0\u27f6\0\76";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\2\1\5\1\6\1\2"+
    "\1\7\1\2\1\10\1\11\1\12\2\2\1\13\1\14"+
    "\1\2\1\15\1\5\1\16\1\17\2\5\1\20\1\21"+
    "\1\4\1\5\1\22\1\5\1\23\2\5\1\24\1\5"+
    "\1\2\1\5\1\25\1\26\1\5\1\27\1\30\1\31"+
    "\6\5\1\32\1\5\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\77\0\2\3\76\0"+
    "\1\4\27\0\1\4\46\0\3\5\4\0\1\5\7\0"+
    "\10\5\1\0\10\5\1\0\15\5\1\0\1\5\21\0"+
    "\1\45\1\46\65\0\11\47\1\50\1\51\63\47\4\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\10\5\1\0"+
    "\3\5\1\52\11\5\1\0\1\5\16\0\4\53\2\0"+
    "\2\53\1\0\3\53\1\54\2\0\10\53\1\0\10\53"+
    "\1\0\15\53\1\0\1\53\20\0\1\55\14\0\1\56"+
    "\13\0\1\56\36\0\1\57\2\0\7\57\1\60\20\57"+
    "\1\0\42\57\15\0\1\61\5\0\1\62\10\0\1\63"+
    "\2\64\1\62\1\65\2\0\1\66\6\0\1\66\3\0"+
    "\1\65\23\0\3\5\4\0\1\5\7\0\5\5\1\67"+
    "\2\5\1\0\10\5\1\0\1\70\14\5\1\0\1\5"+
    "\16\0\3\5\4\0\1\5\7\0\1\5\1\71\6\5"+
    "\1\0\10\5\1\0\1\72\1\73\13\5\1\0\1\5"+
    "\16\0\3\5\4\0\1\5\7\0\5\5\1\74\2\5"+
    "\1\0\10\5\1\0\15\5\1\0\1\5\16\0\3\5"+
    "\4\0\1\5\7\0\10\5\1\0\10\5\1\0\1\75"+
    "\14\5\1\0\1\5\16\0\3\5\4\0\1\5\7\0"+
    "\10\5\1\0\10\5\1\0\1\5\1\76\1\77\1\5"+
    "\1\100\1\5\1\101\6\5\1\0\1\5\20\0\1\102"+
    "\6\0\1\61\5\0\1\23\10\0\1\63\2\64\1\23"+
    "\3\0\1\66\6\0\1\66\27\0\3\5\4\0\1\5"+
    "\7\0\1\5\1\103\6\5\1\0\10\5\1\0\1\104"+
    "\4\5\1\105\7\5\1\0\1\5\16\0\3\5\4\0"+
    "\1\5\7\0\10\5\1\0\10\5\1\0\1\106\14\5"+
    "\1\0\1\5\16\0\3\5\4\0\1\5\7\0\1\5"+
    "\1\107\6\5\1\0\10\5\1\0\1\110\1\111\1\5"+
    "\1\112\11\5\1\0\1\5\16\0\3\5\4\0\1\113"+
    "\7\0\6\5\1\114\1\5\1\0\10\5\1\0\3\5"+
    "\1\115\2\5\1\116\6\5\1\0\1\5\16\0\3\5"+
    "\4\0\1\5\7\0\4\5\1\117\3\5\1\0\10\5"+
    "\1\0\1\5\1\120\7\5\1\121\3\5\1\0\1\5"+
    "\16\0\3\5\4\0\1\5\7\0\3\5\1\122\1\123"+
    "\3\5\1\0\10\5\1\0\15\5\1\0\1\5\47\0"+
    "\1\124\4\0\1\125\10\0\1\126\3\0\1\127\16\0"+
    "\1\45\1\130\1\131\73\45\10\46\1\132\65\46\13\0"+
    "\1\133\26\0\1\133\4\0\1\133\37\0\2\47\6\0"+
    "\12\47\47\0\3\5\4\0\1\5\7\0\10\5\1\0"+
    "\10\5\1\0\6\5\1\134\6\5\1\0\1\5\20\0"+
    "\1\55\14\0\1\55\13\0\1\55\3\0\1\66\6\0"+
    "\1\66\31\0\1\55\14\0\1\56\13\0\1\56\3\0"+
    "\1\66\6\0\1\66\44\0\1\135\65\0\2\57\6\0"+
    "\12\57\60\0\1\61\5\0\1\62\13\0\1\62\3\0"+
    "\1\66\6\0\1\66\60\0\2\136\73\0\1\136\64\0"+
    "\4\137\10\0\1\137\1\0\3\137\3\0\1\137\2\0"+
    "\1\137\31\0\1\140\7\0\1\141\4\0\1\140\13\0"+
    "\1\140\4\0\1\141\35\0\3\5\4\0\1\5\7\0"+
    "\10\5\1\0\10\5\1\0\5\5\1\142\7\5\1\0"+
    "\1\5\16\0\3\5\4\0\1\5\7\0\10\5\1\0"+
    "\10\5\1\0\1\143\14\5\1\0\1\5\16\0\3\5"+
    "\4\0\1\5\7\0\10\5\1\0\10\5\1\0\1\5"+
    "\1\144\13\5\1\0\1\5\16\0\3\5\4\0\1\5"+
    "\7\0\5\5\1\145\2\5\1\0\10\5\1\0\15\5"+
    "\1\0\1\5\16\0\3\5\4\0\1\5\7\0\10\5"+
    "\1\0\10\5\1\0\1\146\14\5\1\0\1\5\16\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\1\5\1\147"+
    "\6\5\1\0\15\5\1\0\1\5\16\0\3\5\4\0"+
    "\1\5\7\0\10\5\1\0\10\5\1\0\6\5\1\150"+
    "\6\5\1\0\1\5\16\0\3\5\4\0\1\5\7\0"+
    "\10\5\1\0\10\5\1\0\1\151\14\5\1\0\1\5"+
    "\16\0\3\5\4\0\1\5\7\0\10\5\1\0\10\5"+
    "\1\0\3\5\1\152\11\5\1\0\1\5\16\0\3\5"+
    "\4\0\1\5\7\0\10\5\1\0\10\5\1\0\3\5"+
    "\1\153\11\5\1\0\1\5\16\0\3\5\4\0\1\5"+
    "\7\0\4\5\1\154\3\5\1\0\10\5\1\0\15\5"+
    "\1\0\1\5\20\0\1\102\14\0\1\102\10\0\1\63"+
    "\2\64\1\102\42\0\3\5\4\0\1\5\7\0\6\5"+
    "\1\155\1\5\1\0\10\5\1\0\15\5\1\0\1\5"+
    "\16\0\3\5\4\0\1\5\7\0\10\5\1\0\1\5"+
    "\1\156\6\5\1\0\15\5\1\0\1\5\16\0\3\5"+
    "\4\0\1\5\7\0\3\5\1\157\4\5\1\0\10\5"+
    "\1\0\15\5\1\0\1\5\16\0\3\5\4\0\1\5"+
    "\7\0\4\5\1\160\3\5\1\0\10\5\1\0\15\5"+
    "\1\0\1\5\16\0\3\5\4\0\1\5\7\0\10\5"+
    "\1\0\10\5\1\0\4\5\1\161\10\5\1\0\1\5"+
    "\16\0\3\5\4\0\1\5\7\0\4\5\1\162\3\5"+
    "\1\0\10\5\1\0\1\5\1\163\13\5\1\0\1\5"+
    "\16\0\3\5\4\0\1\5\7\0\1\5\1\164\6\5"+
    "\1\0\10\5\1\0\15\5\1\0\1\5\16\0\3\5"+
    "\4\0\1\5\7\0\1\5\1\165\6\5\1\0\10\5"+
    "\1\0\15\5\1\0\1\5\16\0\3\5\4\0\1\5"+
    "\7\0\10\5\1\0\10\5\1\0\6\5\1\166\6\5"+
    "\1\0\1\5\16\0\3\5\4\0\1\5\7\0\1\5"+
    "\1\167\3\5\1\170\2\5\1\0\10\5\1\0\15\5"+
    "\1\0\1\5\16\0\3\5\4\0\1\5\7\0\10\5"+
    "\1\0\10\5\1\0\1\171\14\5\1\0\1\5\16\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\10\5\1\0"+
    "\14\5\1\172\1\0\1\5\16\0\3\5\4\0\1\5"+
    "\7\0\10\5\1\0\1\5\1\173\6\5\1\0\15\5"+
    "\1\0\1\5\16\0\3\5\4\0\1\5\7\0\10\5"+
    "\1\0\10\5\1\0\4\5\1\174\10\5\1\0\1\5"+
    "\16\0\3\5\4\0\1\5\7\0\6\5\1\175\1\5"+
    "\1\0\10\5\1\0\15\5\1\0\1\5\16\0\3\5"+
    "\4\0\1\5\7\0\6\5\1\176\1\5\1\0\10\5"+
    "\1\0\12\5\1\177\2\5\1\0\1\5\41\0\1\200"+
    "\120\0\1\201\52\0\1\202\24\0\1\203\51\0\1\204"+
    "\47\0\1\131\73\0\7\46\1\205\1\206\65\46\4\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\10\5\1\0"+
    "\1\5\1\207\13\5\1\0\1\5\20\0\1\137\14\0"+
    "\4\137\5\0\1\63\2\64\1\137\1\0\3\137\3\0"+
    "\1\137\2\0\1\137\31\0\1\140\14\0\1\140\13\0"+
    "\1\140\42\0\3\5\4\0\1\5\7\0\1\5\1\210"+
    "\6\5\1\0\10\5\1\0\15\5\1\0\1\5\16\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\10\5\1\0"+
    "\1\5\1\211\13\5\1\0\1\5\16\0\3\5\4\0"+
    "\1\5\7\0\10\5\1\0\10\5\1\0\4\5\1\212"+
    "\10\5\1\0\1\5\16\0\3\5\4\0\1\5\7\0"+
    "\1\5\1\213\6\5\1\0\10\5\1\0\15\5\1\0"+
    "\1\5\16\0\3\5\4\0\1\5\7\0\10\5\1\0"+
    "\10\5\1\0\5\5\1\214\7\5\1\0\1\5\16\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\6\5\1\215"+
    "\1\5\1\0\15\5\1\0\1\5\16\0\3\5\4\0"+
    "\1\5\7\0\4\5\1\216\3\5\1\0\10\5\1\0"+
    "\15\5\1\0\1\5\16\0\3\5\4\0\1\5\7\0"+
    "\1\5\1\217\6\5\1\0\10\5\1\0\15\5\1\0"+
    "\1\5\16\0\3\5\4\0\1\5\7\0\10\5\1\0"+
    "\10\5\1\0\1\220\14\5\1\0\1\5\16\0\3\5"+
    "\4\0\1\5\7\0\6\5\1\221\1\5\1\0\10\5"+
    "\1\0\15\5\1\0\1\5\16\0\3\5\4\0\1\5"+
    "\7\0\10\5\1\0\10\5\1\0\5\5\1\222\7\5"+
    "\1\0\1\5\16\0\3\5\4\0\1\5\7\0\2\5"+
    "\1\223\5\5\1\0\10\5\1\0\15\5\1\0\1\5"+
    "\16\0\3\5\4\0\1\5\7\0\1\5\1\224\6\5"+
    "\1\0\10\5\1\0\15\5\1\0\1\5\16\0\3\5"+
    "\4\0\1\5\7\0\10\5\1\0\10\5\1\0\10\5"+
    "\1\225\4\5\1\0\1\5\16\0\3\5\4\0\1\5"+
    "\7\0\10\5\1\0\10\5\1\0\5\5\1\226\7\5"+
    "\1\0\1\5\16\0\3\5\4\0\1\5\7\0\6\5"+
    "\1\227\1\5\1\0\10\5\1\0\4\5\1\230\10\5"+
    "\1\0\1\5\16\0\3\5\4\0\1\5\7\0\10\5"+
    "\1\0\10\5\1\0\1\231\14\5\1\0\1\5\16\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\10\5\1\0"+
    "\4\5\1\232\10\5\1\0\1\5\16\0\3\5\4\0"+
    "\1\5\7\0\5\5\1\233\2\5\1\0\10\5\1\0"+
    "\15\5\1\0\1\5\16\0\3\5\4\0\1\5\7\0"+
    "\6\5\1\234\1\5\1\0\10\5\1\0\15\5\1\0"+
    "\1\5\16\0\3\5\4\0\1\5\7\0\6\5\1\235"+
    "\1\5\1\0\10\5\1\0\15\5\1\0\1\5\16\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\1\5\1\236"+
    "\6\5\1\0\6\5\1\237\6\5\1\0\1\5\16\0"+
    "\3\5\4\0\1\5\7\0\5\5\1\240\2\5\1\0"+
    "\10\5\1\0\15\5\1\0\1\5\16\0\3\5\4\0"+
    "\1\5\7\0\10\5\1\0\10\5\1\0\5\5\1\241"+
    "\7\5\1\0\1\5\16\0\3\5\4\0\1\5\7\0"+
    "\10\5\1\0\10\5\1\0\7\5\1\242\5\5\1\0"+
    "\1\5\16\0\3\5\4\0\1\5\7\0\10\5\1\0"+
    "\10\5\1\0\5\5\1\243\7\5\1\0\1\5\16\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\10\5\1\0"+
    "\5\5\1\244\7\5\1\0\1\5\16\0\3\5\4\0"+
    "\1\5\7\0\10\5\1\0\1\5\1\245\6\5\1\0"+
    "\15\5\1\0\1\5\54\0\1\246\61\0\1\247\116\0"+
    "\1\250\105\0\1\251\63\0\1\252\30\0\10\46\1\253"+
    "\65\46\4\0\3\5\4\0\1\5\7\0\10\5\1\0"+
    "\10\5\1\0\5\5\1\254\7\5\1\0\1\5\16\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\10\5\1\0"+
    "\13\5\1\255\1\5\1\0\1\5\16\0\3\5\4\0"+
    "\1\5\7\0\10\5\1\0\10\5\1\0\5\5\1\256"+
    "\7\5\1\0\1\5\16\0\3\5\4\0\1\5\7\0"+
    "\6\5\1\257\1\5\1\0\10\5\1\0\15\5\1\0"+
    "\1\5\16\0\3\5\4\0\1\5\7\0\10\5\1\0"+
    "\10\5\1\0\10\5\1\260\4\5\1\0\1\5\16\0"+
    "\3\5\4\0\1\5\7\0\5\5\1\261\2\5\1\0"+
    "\10\5\1\0\15\5\1\0\1\5\16\0\3\5\4\0"+
    "\1\5\7\0\5\5\1\262\2\5\1\0\10\5\1\0"+
    "\15\5\1\0\1\5\16\0\3\5\4\0\1\5\7\0"+
    "\6\5\1\263\1\5\1\0\10\5\1\0\15\5\1\0"+
    "\1\5\16\0\3\5\4\0\1\5\7\0\10\5\1\0"+
    "\10\5\1\0\1\5\1\264\13\5\1\0\1\5\16\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\1\5\1\265"+
    "\6\5\1\0\15\5\1\0\1\5\16\0\3\5\4\0"+
    "\1\5\7\0\10\5\1\0\10\5\1\0\6\5\1\266"+
    "\6\5\1\0\1\5\16\0\3\5\4\0\1\5\7\0"+
    "\6\5\1\267\1\5\1\0\10\5\1\0\15\5\1\0"+
    "\1\5\16\0\3\5\4\0\1\5\7\0\5\5\1\270"+
    "\2\5\1\0\10\5\1\0\15\5\1\0\1\5\16\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\10\5\1\0"+
    "\4\5\1\271\10\5\1\0\1\5\16\0\3\5\4\0"+
    "\1\5\7\0\10\5\1\0\10\5\1\0\2\5\1\272"+
    "\12\5\1\0\1\5\16\0\3\5\4\0\1\5\7\0"+
    "\10\5\1\0\10\5\1\0\6\5\1\273\6\5\1\0"+
    "\1\5\16\0\3\5\4\0\1\5\7\0\10\5\1\0"+
    "\10\5\1\0\2\5\1\274\12\5\1\0\1\5\16\0"+
    "\3\5\4\0\1\5\7\0\4\5\1\275\3\5\1\0"+
    "\10\5\1\0\15\5\1\0\1\5\16\0\3\5\4\0"+
    "\1\5\7\0\6\5\1\276\1\5\1\0\10\5\1\0"+
    "\15\5\1\0\1\5\16\0\3\5\4\0\1\5\7\0"+
    "\10\5\1\0\10\5\1\0\1\277\14\5\1\0\1\5"+
    "\16\0\3\5\4\0\1\5\7\0\5\5\1\300\2\5"+
    "\1\0\10\5\1\0\15\5\1\0\1\5\16\0\3\5"+
    "\4\0\1\5\7\0\6\5\1\301\1\5\1\0\10\5"+
    "\1\0\15\5\1\0\1\5\64\0\1\302\76\0\1\303"+
    "\70\0\1\304\74\0\1\305\107\0\1\306\16\0\7\46"+
    "\1\307\1\253\65\46\4\0\3\5\4\0\1\5\7\0"+
    "\6\5\1\310\1\5\1\0\10\5\1\0\15\5\1\0"+
    "\1\5\16\0\3\5\4\0\1\5\7\0\10\5\1\0"+
    "\10\5\1\0\6\5\1\311\6\5\1\0\1\5\16\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\10\5\1\0"+
    "\5\5\1\312\7\5\1\0\1\5\16\0\3\5\4\0"+
    "\1\5\7\0\10\5\1\0\10\5\1\0\1\5\1\313"+
    "\13\5\1\0\1\5\16\0\3\5\4\0\1\5\7\0"+
    "\4\5\1\314\3\5\1\0\10\5\1\0\15\5\1\0"+
    "\1\5\16\0\3\5\4\0\1\5\7\0\10\5\1\0"+
    "\10\5\1\0\3\5\1\315\11\5\1\0\1\5\16\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\10\5\1\0"+
    "\2\5\1\316\12\5\1\0\1\5\16\0\3\5\4\0"+
    "\1\5\7\0\6\5\1\317\1\5\1\0\10\5\1\0"+
    "\15\5\1\0\1\5\16\0\3\5\4\0\1\5\7\0"+
    "\10\5\1\0\10\5\1\0\10\5\1\320\4\5\1\0"+
    "\1\5\16\0\3\5\4\0\1\5\7\0\3\5\1\321"+
    "\4\5\1\0\10\5\1\0\15\5\1\0\1\5\16\0"+
    "\3\5\4\0\1\5\7\0\4\5\1\322\3\5\1\0"+
    "\10\5\1\0\15\5\1\0\1\5\40\0\1\323\76\0"+
    "\1\324\103\0\1\325\70\0\1\326\117\0\1\327\27\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\10\5\1\0"+
    "\7\5\1\330\5\5\1\0\1\5\16\0\3\5\4\0"+
    "\1\5\7\0\6\5\1\331\1\5\1\0\10\5\1\0"+
    "\15\5\1\0\1\5\16\0\3\5\4\0\1\5\7\0"+
    "\10\5\1\0\1\5\1\332\6\5\1\0\15\5\1\0"+
    "\1\5\64\0\1\333\65\0\1\334\64\0\1\335\74\0"+
    "\1\336\51\0\3\5\4\0\1\5\7\0\10\5\1\0"+
    "\10\5\1\0\5\5\1\337\7\5\1\0\1\5\16\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\10\5\1\0"+
    "\5\5\1\340\7\5\1\0\1\5\64\0\1\341\54\0"+
    "\1\342\127\0\1\343\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10292];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\1\11\17\1\12\11\1\1\2\0"+
    "\1\1\1\0\1\1\1\0\1\11\1\0\1\1\4\0"+
    "\2\1\2\0\35\1\4\0\1\1\1\11\1\0\1\11"+
    "\1\1\2\11\2\1\1\0\36\1\5\0\1\11\1\0"+
    "\37\1\6\0\26\1\5\0\14\1\1\11\4\0\3\1"+
    "\1\11\1\0\1\11\1\0\2\1\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MQL4Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return MQL4Elements.BAD_CHARACTER;
            }
          case 65: break;
          case 2: 
            { return MQL4Elements.LINE_TERMINATOR;
            }
          case 66: break;
          case 3: 
            { return MQL4Elements.WHITE_SPACE;
            }
          case 67: break;
          case 4: 
            { return MQL4Elements.IDENTIFIER;
            }
          case 68: break;
          case 5: 
            { return MQL4Elements.LT;
            }
          case 69: break;
          case 6: 
            { return MQL4Elements.DOT;
            }
          case 70: break;
          case 7: 
            { return MQL4Elements.GT;
            }
          case 71: break;
          case 8: 
            { return MQL4Elements.INTEGER_LITERAL;
            }
          case 72: break;
          case 9: 
            { return MQL4Elements.EQ;
            }
          case 73: break;
          case 10: 
            { return MQL4Elements.LPARENTH;
            }
          case 74: break;
          case 11: 
            { return MQL4Elements.RPARENTH;
            }
          case 75: break;
          case 12: 
            { return MQL4Elements.LBRACE;
            }
          case 76: break;
          case 13: 
            { return MQL4Elements.RBRACE;
            }
          case 77: break;
          case 14: 
            { return MQL4Elements.LBRACKET;
            }
          case 78: break;
          case 15: 
            { return MQL4Elements.RBRACKET;
            }
          case 79: break;
          case 16: 
            { return MQL4Elements.SEMICOLON;
            }
          case 80: break;
          case 17: 
            { return MQL4Elements.COLON;
            }
          case 81: break;
          case 18: 
            { return MQL4Elements.COMMA;
            }
          case 82: break;
          case 19: 
            { return MQL4Elements.LINE_COMMENT;
            }
          case 83: break;
          case 20: 
            { return MQL4Elements.STRING_LITERAL;
            }
          case 84: break;
          case 21: 
            { return MQL4Elements.INCLUDE_STRING_LITERAL;
            }
          case 85: break;
          case 22: 
            { return MQL4Elements.DOUBLE_LITERAL;
            }
          case 86: break;
          case 23: 
            { return MQL4Elements.DO_KEYWORD;
            }
          case 87: break;
          case 24: 
            { return MQL4Elements.IF_KEYWORD;
            }
          case 88: break;
          case 25: 
            { return MQL4Elements.CHAR_LITERAL;
            }
          case 89: break;
          case 26: 
            { return MQL4Elements.FOR_KEYWORD;
            }
          case 90: break;
          case 27: 
            { return MQL4Elements.INT_KEYWORD;
            }
          case 91: break;
          case 28: 
            { return MQL4Elements.BLOCK_COMMENT;
            }
          case 92: break;
          case 29: 
            { return MQL4Elements.BOOL_KEYWORD;
            }
          case 93: break;
          case 30: 
            { return MQL4Elements.TRUE_KEYWORD;
            }
          case 94: break;
          case 31: 
            { return MQL4Elements.VOID_KEYWORD;
            }
          case 95: break;
          case 32: 
            { return MQL4Elements.UINT_KEYWORD;
            }
          case 96: break;
          case 33: 
            { return MQL4Elements.LONG_KEYWORD;
            }
          case 97: break;
          case 34: 
            { return MQL4Elements.CASE_KEYWORD;
            }
          case 98: break;
          case 35: 
            { return MQL4Elements.CHAR_KEYWORD;
            }
          case 99: break;
          case 36: 
            { return MQL4Elements.ENUM_KEYWORD;
            }
          case 100: break;
          case 37: 
            { return MQL4Elements.ELSE_KEYWORD;
            }
          case 101: break;
          case 38: 
            { return MQL4Elements.WHILE_KEYWORD;
            }
          case 102: break;
          case 39: 
            { return MQL4Elements.BREAK_KEYWORD;
            }
          case 103: break;
          case 40: 
            { return MQL4Elements.FALSE_KEYWORD;
            }
          case 104: break;
          case 41: 
            { return MQL4Elements.FLOAT_KEYWORD;
            }
          case 105: break;
          case 42: 
            { return MQL4Elements.ULONG_KEYWORD;
            }
          case 106: break;
          case 43: 
            { return MQL4Elements.UCHAR_KEYWORD;
            }
          case 107: break;
          case 44: 
            { return MQL4Elements.CONST_KEYWORD;
            }
          case 108: break;
          case 45: 
            { return MQL4Elements.COLOR_KEYWORD;
            }
          case 109: break;
          case 46: 
            { return MQL4Elements.CLASS_KEYWORD;
            }
          case 110: break;
          case 47: 
            { return MQL4Elements.SHORT_KEYWORD;
            }
          case 111: break;
          case 48: 
            { return MQL4Elements.INPUT_KEYWORD;
            }
          case 112: break;
          case 49: 
            { return MQL4Elements.USHORT_KEYWORD;
            }
          case 113: break;
          case 50: 
            { return MQL4Elements.DOUBLE_KEYWORD;
            }
          case 114: break;
          case 51: 
            { return MQL4Elements.SWITCH_KEYWORD;
            }
          case 115: break;
          case 52: 
            { return MQL4Elements.STATIC_KEYWORD;
            }
          case 116: break;
          case 53: 
            { return MQL4Elements.STRUCT_KEYWORD;
            }
          case 117: break;
          case 54: 
            { return MQL4Elements.STRING_KEYWORD;
            }
          case 118: break;
          case 55: 
            { return MQL4Elements.SIZEOF_KEYWORD;
            }
          case 119: break;
          case 56: 
            { return MQL4Elements.EXTERN_KEYWORD;
            }
          case 120: break;
          case 57: 
            { return MQL4Elements.UNDEF_KEYWORD;
            }
          case 121: break;
          case 58: 
            { return MQL4Elements.DEFAULT_KEYWORD;
            }
          case 122: break;
          case 59: 
            { return MQL4Elements.DEFINE_KEYWORD;
            }
          case 123: break;
          case 60: 
            { return MQL4Elements.IMPORT_KEYWORD;
            }
          case 124: break;
          case 61: 
            { return MQL4Elements.DATETIME_KEYWORD;
            }
          case 125: break;
          case 62: 
            { return MQL4Elements.CONTINUE_KEYWORD;
            }
          case 126: break;
          case 63: 
            { return MQL4Elements.INCLUDE_KEYWORD;
            }
          case 127: break;
          case 64: 
            { return MQL4Elements.PROPERTY_KEYWORD;
            }
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
