/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package ru.investflow.mql;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import ru.investflow.mql.psi.MQL4Elements;

@SuppressWarnings({"ALL"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>MQL4Lexer.flex</tt>
 */
public class MQL4Lexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13728 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\10\1\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\23\12\12\1\24\1\12"+
    "\1\25\1\24\1\12\1\26\4\1\1\12\1\27\1\30\2\1\2\12\1\27\1\1\1\31\1\24\5\12\1"+
    "\32\1\33\1\34\1\1\1\35\1\12\1\1\1\36\5\12\1\37\1\40\1\41\1\12\1\27\1\42\1"+
    "\12\1\43\1\44\1\1\1\12\1\45\4\1\1\12\1\46\4\1\1\47\2\12\1\50\1\1\1\51\1\52"+
    "\1\24\1\53\1\54\1\55\1\56\1\57\1\60\1\52\1\15\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\64\1\65\1\66\1\21\1\55\1\67\1\1\1\70\1\52\1\71\1\72\1\54\1\55\1\67\1\1"+
    "\1\60\1\52\1\40\1\73\1\74\1\75\1\76\1\1\1\70\1\64\1\1\1\77\1\35\1\55\1\50"+
    "\1\1\1\100\1\52\1\1\1\77\1\35\1\55\1\101\1\1\1\57\1\52\1\102\1\77\1\35\1\12"+
    "\1\103\1\57\1\104\1\52\1\105\1\106\1\107\1\12\1\110\1\111\1\1\1\64\1\1\1\24"+
    "\2\12\1\112\1\111\1\113\2\1\1\114\1\115\1\116\1\117\1\120\1\121\2\1\1\70\1"+
    "\1\1\113\1\1\1\122\1\12\1\123\1\1\1\124\7\1\2\12\1\27\1\104\1\113\1\125\1"+
    "\126\1\127\1\130\1\113\2\12\1\131\2\12\1\132\24\12\1\133\1\134\2\12\1\133"+
    "\2\12\1\135\1\136\1\13\3\12\1\136\3\12\1\27\2\1\1\12\1\1\5\12\1\137\1\24\45"+
    "\12\1\140\1\12\1\24\1\27\4\12\1\27\1\141\1\142\1\15\1\12\1\15\1\12\1\15\1"+
    "\142\1\70\3\12\1\143\1\1\1\144\1\113\2\1\1\113\5\12\1\26\2\12\1\145\4\12\1"+
    "\37\1\12\1\146\2\1\1\64\1\12\1\147\1\46\2\12\1\150\1\12\1\76\1\113\2\1\1\12"+
    "\1\111\3\12\1\46\2\1\2\113\1\151\5\1\1\106\2\12\1\143\1\152\1\113\2\1\1\153"+
    "\1\12\1\154\1\41\2\12\1\37\1\1\2\12\1\143\1\1\1\155\1\41\1\12\1\147\6\1\1"+
    "\156\1\157\14\12\4\1\21\12\1\137\2\12\1\137\1\160\1\12\1\147\3\12\1\161\1"+
    "\162\1\163\1\123\1\162\7\1\1\164\1\1\1\123\6\1\1\165\1\166\1\167\1\170\1\171"+
    "\3\1\1\172\147\1\2\12\1\146\2\12\1\146\10\12\1\173\1\174\2\12\1\131\3\12\1"+
    "\175\1\1\1\12\1\111\4\176\4\1\1\104\35\1\1\177\2\1\1\200\1\24\4\12\1\201\1"+
    "\24\4\12\1\132\1\106\1\12\1\147\1\24\4\12\1\146\1\1\1\12\1\27\3\1\1\12\40"+
    "\1\133\12\1\37\4\1\135\12\1\37\2\1\10\12\1\123\4\1\2\12\1\147\20\12\1\123"+
    "\1\12\1\202\1\1\2\12\1\146\1\104\1\12\1\147\4\12\1\37\2\1\1\203\1\204\5\12"+
    "\1\205\1\12\1\147\1\26\3\1\1\203\1\206\1\12\1\30\1\1\3\12\1\143\1\204\2\12"+
    "\1\143\1\1\1\113\1\1\1\207\1\41\1\12\1\37\1\12\1\111\1\1\1\12\1\123\1\47\2"+
    "\12\1\30\1\104\1\113\1\210\1\211\2\12\1\45\1\1\1\212\1\113\1\12\1\213\3\12"+
    "\1\214\1\215\1\216\1\27\1\65\1\217\1\220\1\176\2\12\1\132\1\37\7\12\1\30\1"+
    "\113\72\12\1\143\1\12\1\221\2\12\1\150\20\1\26\12\1\147\6\12\1\76\2\1\1\111"+
    "\1\222\1\55\1\223\1\224\6\12\1\15\1\1\1\153\25\12\1\147\1\1\4\12\1\204\2\12"+
    "\1\26\2\1\1\150\7\1\1\210\7\12\1\123\1\1\1\113\1\24\1\27\1\24\1\27\1\225\4"+
    "\12\1\146\1\226\1\227\2\1\1\230\1\12\1\13\1\231\2\147\2\1\7\12\1\27\30\1\1"+
    "\12\1\123\3\12\1\70\2\1\2\12\1\1\1\12\1\232\2\12\1\37\1\12\1\147\2\12\1\233"+
    "\3\1\11\12\1\147\1\113\5\1\2\12\1\26\3\12\1\143\11\1\23\12\1\111\1\12\1\37"+
    "\1\26\11\1\1\234\2\12\1\235\1\12\1\37\1\12\1\111\1\12\1\146\4\1\1\12\1\236"+
    "\1\12\1\37\1\12\1\76\4\1\3\12\1\237\4\1\1\70\1\240\1\12\1\143\2\1\1\12\1\123"+
    "\1\12\1\123\2\1\1\122\1\12\1\46\1\1\3\12\1\37\1\12\1\37\1\12\1\30\1\12\1\15"+
    "\6\1\4\12\1\45\3\1\3\12\1\30\3\12\1\30\60\1\1\153\2\12\1\26\2\1\1\64\1\1\1"+
    "\153\2\12\2\1\1\12\1\45\1\113\1\153\1\12\1\111\1\64\1\1\2\12\1\241\1\153\2"+
    "\12\1\30\1\242\1\243\2\1\1\12\1\21\1\150\5\1\1\244\1\245\1\45\2\12\1\146\1"+
    "\1\1\113\1\72\1\54\1\55\1\67\1\1\1\246\1\15\21\1\3\12\1\1\1\247\1\113\12\1"+
    "\2\12\1\146\2\1\1\250\2\1\3\12\1\1\1\251\1\113\2\1\2\12\1\27\1\1\1\113\3\1"+
    "\1\12\1\76\1\1\1\113\26\1\4\12\1\113\1\104\34\1\3\12\1\45\20\1\71\12\1\76"+
    "\16\1\14\12\1\143\53\1\2\12\1\146\75\1\44\12\1\111\33\1\43\12\1\45\1\12\1"+
    "\146\1\113\6\1\1\12\1\147\1\1\3\12\1\1\1\143\1\113\1\153\1\252\1\12\67\1\4"+
    "\12\1\46\1\70\3\1\1\153\6\1\1\15\77\1\6\12\1\27\1\123\1\45\1\76\66\1\5\12"+
    "\1\210\3\12\1\142\1\253\1\254\1\255\3\12\1\256\1\257\1\12\1\260\1\261\1\35"+
    "\24\12\1\262\1\12\1\35\1\132\1\12\1\132\1\12\1\210\1\12\1\210\1\146\1\12\1"+
    "\146\1\12\1\55\1\12\1\55\1\12\1\263\3\264\14\12\1\46\123\1\1\255\1\12\1\265"+
    "\1\266\1\267\1\270\1\271\1\272\1\273\1\150\1\274\1\150\24\1\55\12\1\111\2"+
    "\1\103\12\1\46\15\12\1\147\150\12\1\15\25\1\41\12\1\147\36\1");

  /* The ZZ_CMAP_A table has 3024 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\33\1\2\1\0\1\33\1\1\22\0\1\3\1\72\1\11\1\62\1\17\1\65\1\66\1\21\1"+
    "\73\1\74\1\10\1\44\1\103\1\16\1\15\1\7\1\23\11\37\1\102\1\101\1\14\1\64\1"+
    "\20\1\22\1\0\4\41\1\43\1\41\5\4\1\34\10\4\1\36\2\4\1\40\2\4\1\77\1\12\1\100"+
    "\1\70\1\6\1\0\1\24\1\25\1\47\1\42\1\52\1\26\1\55\1\50\1\53\1\4\1\60\1\46\1"+
    "\54\1\27\1\45\1\56\1\4\1\30\1\51\1\31\1\35\1\32\1\13\1\57\1\63\1\61\1\75\1"+
    "\67\1\76\1\71\13\0\1\4\12\0\1\4\4\0\1\4\5\0\27\4\1\0\12\4\4\0\14\4\16\0\5"+
    "\4\7\0\1\4\1\0\1\4\1\0\5\4\1\0\2\4\2\0\4\4\1\0\1\4\6\0\1\4\1\0\3\4\1\0\1\4"+
    "\1\0\4\4\1\0\23\4\1\0\13\4\10\0\6\4\1\0\26\4\2\0\1\4\6\0\10\4\10\0\13\4\5"+
    "\0\3\4\15\0\12\5\4\0\6\4\1\0\1\4\17\0\2\4\7\0\2\4\12\5\3\4\2\0\2\4\1\0\16"+
    "\4\15\0\11\4\13\0\1\4\16\0\12\5\6\4\4\0\2\4\4\0\1\4\5\0\6\4\4\0\1\4\11\0\1"+
    "\4\3\0\1\4\7\0\11\4\7\0\5\4\17\0\26\4\3\0\1\4\2\0\1\4\7\0\12\4\4\0\12\5\1"+
    "\4\4\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4\3\0\1\4\20\0\1\4\15\0"+
    "\2\4\1\0\1\4\5\0\6\4\4\0\2\4\1\0\2\4\1\0\2\4\1\0\2\4\17\0\4\4\1\0\1\4\7\0"+
    "\12\5\2\0\3\4\20\0\11\4\1\0\2\4\1\0\2\4\1\0\5\4\3\0\1\4\2\0\1\4\30\0\1\4\13"+
    "\0\10\4\2\0\1\4\3\0\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3"+
    "\0\2\4\3\0\3\4\3\0\14\4\13\0\10\4\1\0\2\4\10\0\3\4\5\0\4\4\1\0\5\4\3\0\1\4"+
    "\3\0\2\4\15\0\13\4\2\0\1\4\21\0\1\4\12\0\6\4\5\0\22\4\3\0\10\4\1\0\11\4\1"+
    "\0\1\4\2\0\7\4\11\0\1\4\1\0\2\4\14\0\12\5\7\0\2\4\1\0\1\4\2\0\2\4\1\0\1\4"+
    "\2\0\1\4\6\0\4\4\1\0\7\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0\4\4\1\0\2\4\11"+
    "\0\1\4\2\0\5\4\1\0\1\4\11\0\12\5\2\0\14\4\1\0\24\4\13\0\5\4\3\0\6\4\4\0\4"+
    "\4\3\0\1\4\3\0\2\4\7\0\3\4\4\0\15\4\14\0\1\4\1\0\6\4\1\0\1\4\5\0\1\4\2\0\13"+
    "\4\1\0\15\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\1\4\1\0\4\4\2\0\7\4\1\0\1"+
    "\4\1\0\4\4\2\0\16\4\2\0\6\4\2\0\15\4\2\0\1\4\1\0\10\4\7\0\15\4\1\0\6\4\23"+
    "\0\1\4\4\0\1\4\3\0\11\4\1\0\1\4\5\0\17\4\1\0\16\4\2\0\14\4\13\0\1\4\15\0\7"+
    "\4\7\0\16\4\15\0\2\4\12\5\3\0\3\4\11\0\4\4\1\0\4\4\3\0\2\4\11\0\10\4\1\0\1"+
    "\4\1\0\1\4\1\0\1\4\1\0\6\4\1\0\7\4\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0\6\4"+
    "\5\0\1\4\15\0\1\4\2\0\1\4\4\0\1\4\2\0\12\4\1\0\1\4\3\0\5\4\6\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\0\4\4\1\0\13\4\2\0\4\4\5\0\5\4\4\0\1\4\4\0\2\4\13\0\5\4\6\0\4\4"+
    "\3\0\2\4\14\0\10\4\7\0\10\4\1\0\7\4\6\0\2\4\12\0\5\4\5\0\2\4\3\0\7\4\6\0\3"+
    "\4\12\5\2\4\13\0\11\4\2\0\27\4\2\0\7\4\1\0\3\4\1\0\4\4\1\0\4\4\2\0\6\4\3\0"+
    "\1\4\1\0\1\4\2\0\5\4\1\0\12\4\12\5\5\4\1\0\3\4\1\0\10\4\4\0\7\4\3\0\1\4\3"+
    "\0\2\4\1\0\1\4\3\0\2\4\2\0\5\4\2\0\1\4\1\0\1\4\30\0\3\4\3\0\6\4\2\0\6\4\2"+
    "\0\6\4\11\0\7\4\4\0\5\4\3\0\5\4\5\0\1\4\1\0\10\4\1\0\5\4\1\0\1\4\1\0\2\4\1"+
    "\0\2\4\1\0\12\4\6\0\12\4\2\0\6\4\2\0\6\4\2\0\6\4\2\0\3\4\3\0\14\4\1\0\16\4"+
    "\1\0\2\4\1\0\2\4\1\0\10\4\6\0\4\4\4\0\16\4\2\0\1\4\1\0\14\4\1\0\2\4\3\0\1"+
    "\4\2\0\4\4\1\0\2\4\12\0\10\4\6\0\6\4\1\0\3\4\1\0\12\4\3\0\1\4\12\0\4\4\13"+
    "\0\12\5\1\4\1\0\1\4\3\0\7\4\1\0\1\4\1\0\4\4\1\0\17\4\1\0\2\4\14\0\3\4\4\0"+
    "\2\4\1\0\1\4\20\0\4\4\10\0\1\4\13\0\10\4\5\0\3\4\2\0\1\4\2\0\2\4\2\0\4\4\1"+
    "\0\14\4\1\0\1\4\1\0\7\4\1\0\21\4\1\0\4\4\2\0\10\4\1\0\7\4\1\0\14\4\1\0\4\4"+
    "\1\0\5\4\1\0\1\4\3\0\14\4\2\0\13\4\1\0\10\4\2\0\22\5\1\0\2\4\1\0\1\4\2\0\1"+
    "\4\1\0\12\4\1\0\4\4\1\0\1\4\1\0\1\4\6\0\1\4\4\0\1\4\1\0\1\4\1\0\1\4\1\0\3"+
    "\4\1\0\2\4\1\0\1\4\2\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\2\4\1\0\1\4"+
    "\2\0\4\4\1\0\7\4\1\0\4\4\1\0\4\4\1\0\1\4\1\0\12\4\1\0\5\4\1\0\3\4\1\0\5\4"+
    "\1\0\5\4");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\4\1\7\1\10\1\11\1\12\1\1\1\13\1\14"+
    "\7\4\1\14\1\4\1\15\7\4\1\1\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\0"+
    "\1\37\1\40\1\0\1\41\1\0\1\4\1\0\1\42"+
    "\1\43\1\44\1\0\1\45\1\46\1\47\1\50\1\51"+
    "\4\0\2\14\2\0\21\4\1\14\1\4\1\52\1\4"+
    "\1\53\1\54\15\4\1\55\3\4\4\0\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\2\36\1\0\1\41\1\4\1\70\1\71\1\72\1\73"+
    "\2\14\1\45\1\0\3\4\1\74\1\4\1\75\36\4"+
    "\1\76\4\4\5\0\1\77\1\100\1\0\1\4\1\101"+
    "\1\4\1\102\3\4\1\103\1\104\2\4\1\105\4\4"+
    "\1\106\5\4\1\107\1\110\4\4\1\111\6\4\1\112"+
    "\1\113\5\4\6\0\1\114\1\115\1\116\1\117\4\4"+
    "\1\120\1\121\7\4\1\122\1\123\1\124\5\4\1\125"+
    "\2\4\1\126\3\4\5\0\1\100\1\127\3\4\1\130"+
    "\1\4\1\131\1\4\1\132\2\4\1\133\1\134\1\135"+
    "\1\136\1\137\1\140\1\141\2\4\1\142\1\143\4\0"+
    "\2\4\1\144\1\4\1\145\3\4\1\146\1\147\1\0"+
    "\1\150\1\0\1\151\1\152\1\153\1\154\1\155\1\4"+
    "\1\156\1\0\1\157\1\160";

  private static int [] zzUnpackAction() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\104\0\u03b8"+
    "\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8"+
    "\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8"+
    "\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990\0\u09d4\0\u0a18"+
    "\0\u0a5c\0\104\0\104\0\104\0\104\0\104\0\104\0\104"+
    "\0\104\0\104\0\u0aa0\0\u0ae4\0\104\0\104\0\u01dc\0\u0b28"+
    "\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\104\0\104\0\u0c7c\0\u0cc0"+
    "\0\104\0\104\0\u0d04\0\104\0\u0d48\0\u0d8c\0\u02a8\0\u0dd0"+
    "\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0"+
    "\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210"+
    "\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430"+
    "\0\u1474\0\104\0\104\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8"+
    "\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8"+
    "\0\u0110\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4"+
    "\0\104\0\104\0\104\0\104\0\104\0\104\0\104\0\u1a08"+
    "\0\104\0\104\0\u1a4c\0\104\0\u1a90\0\104\0\u1ad4\0\104"+
    "\0\u1b18\0\104\0\104\0\104\0\u1b5c\0\u1ba0\0\u1ba0\0\u1be4"+
    "\0\u1c28\0\u1c6c\0\u0110\0\u1cb0\0\u0110\0\u1cf4\0\u1d38\0\u1d7c"+
    "\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c"+
    "\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc"+
    "\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc"+
    "\0\u2420\0\u2464\0\u24a8\0\u0110\0\u24ec\0\u2530\0\u2574\0\u25b8"+
    "\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\104\0\104\0\u2750"+
    "\0\u2794\0\104\0\u27d8\0\u0110\0\u281c\0\u2860\0\u28a4\0\u0110"+
    "\0\u0110\0\u28e8\0\u292c\0\u0110\0\u2970\0\u29b4\0\u29f8\0\u2a3c"+
    "\0\u0110\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90\0\u0110\0\u0110"+
    "\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u0110\0\u2ce4\0\u2d28\0\u2d6c"+
    "\0\u2db0\0\u2df4\0\u2e38\0\u0110\0\u0110\0\u2e7c\0\u2ec0\0\u2f04"+
    "\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u30e0\0\u3124"+
    "\0\u0110\0\u0110\0\u0110\0\u0110\0\u3168\0\u31ac\0\u31f0\0\u3234"+
    "\0\u0110\0\u0110\0\u3278\0\u32bc\0\u3300\0\u3344\0\u3388\0\u33cc"+
    "\0\u3410\0\u0110\0\u0110\0\u0110\0\u3454\0\u3498\0\u34dc\0\u3520"+
    "\0\u3564\0\u0110\0\u35a8\0\u35ec\0\u0110\0\u3630\0\u3674\0\u36b8"+
    "\0\u36fc\0\u3740\0\u3784\0\u37c8\0\u380c\0\u0ae4\0\u0110\0\u3850"+
    "\0\u3894\0\u38d8\0\u0110\0\u391c\0\u0110\0\u3960\0\u0110\0\u39a4"+
    "\0\u39e8\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110"+
    "\0\u3a2c\0\u3a70\0\u0110\0\104\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80"+
    "\0\u3bc4\0\u3c08\0\u0110\0\u3c4c\0\u0110\0\u3c90\0\u3cd4\0\u3d18"+
    "\0\u0110\0\104\0\u3d5c\0\104\0\u3da0\0\u0110\0\u0110\0\u0110"+
    "\0\u0110\0\u0110\0\u3de4\0\104\0\u3e28\0\u0110\0\104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\2\1\5\1\6\1\7"+
    "\1\10\1\2\1\11\1\12\1\13\1\14\1\2\1\15"+
    "\1\16\1\17\1\20\1\5\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\4\1\5\1\27\1\5\1\30\2\5"+
    "\1\31\1\5\1\32\1\33\1\34\1\35\1\5\1\36"+
    "\1\37\1\40\2\5\1\41\3\5\1\42\1\5\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\105\0"+
    "\2\3\104\0\1\4\27\0\1\4\54\0\3\5\4\0"+
    "\1\5\7\0\10\5\1\0\10\5\1\0\15\5\1\0"+
    "\1\5\27\0\1\63\1\64\53\0\1\65\103\0\1\66"+
    "\17\0\11\67\1\70\1\71\71\67\4\0\3\5\4\0"+
    "\1\5\7\0\10\5\1\0\10\5\1\0\3\5\1\72"+
    "\11\5\1\0\1\5\24\0\4\73\2\0\2\73\1\74"+
    "\3\73\1\75\2\0\10\73\1\0\10\73\1\0\15\73"+
    "\1\0\1\73\1\76\25\0\1\77\14\0\1\100\13\0"+
    "\1\100\62\0\1\101\45\0\1\102\37\0\1\103\43\0"+
    "\1\104\17\0\1\105\2\0\7\105\1\106\20\105\1\0"+
    "\50\105\15\0\1\107\5\0\1\110\10\0\1\111\2\112"+
    "\1\110\1\113\2\0\1\114\6\0\1\114\4\0\1\113"+
    "\30\0\3\5\4\0\1\5\7\0\5\5\1\115\2\5"+
    "\1\0\10\5\1\0\1\116\14\5\1\0\1\5\24\0"+
    "\3\5\4\0\1\5\7\0\1\5\1\117\6\5\1\0"+
    "\10\5\1\0\1\120\1\121\13\5\1\0\1\5\24\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\10\5\1\0"+
    "\5\5\1\122\7\5\1\0\1\5\24\0\3\5\4\0"+
    "\1\5\7\0\10\5\1\0\10\5\1\0\5\5\1\123"+
    "\7\5\1\0\1\5\24\0\3\5\4\0\1\5\7\0"+
    "\5\5\1\124\2\5\1\0\10\5\1\0\3\5\1\125"+
    "\1\5\1\126\7\5\1\0\1\127\24\0\3\5\4\0"+
    "\1\5\7\0\10\5\1\0\10\5\1\0\1\130\5\5"+
    "\1\131\6\5\1\0\1\5\24\0\3\5\4\0\1\5"+
    "\7\0\10\5\1\0\10\5\1\0\1\5\1\132\1\133"+
    "\1\5\1\134\1\5\1\135\6\5\1\0\1\5\26\0"+
    "\1\136\6\0\1\107\5\0\1\30\10\0\1\111\2\112"+
    "\1\30\3\0\1\114\6\0\1\114\35\0\3\5\4\0"+
    "\1\5\7\0\1\5\1\137\6\5\1\0\10\5\1\0"+
    "\1\140\4\5\1\141\7\5\1\0\1\5\64\0\1\142"+
    "\17\0\1\143\23\0\3\5\4\0\1\5\7\0\10\5"+
    "\1\0\10\5\1\0\11\5\1\144\3\5\1\0\1\5"+
    "\24\0\3\5\4\0\1\5\7\0\10\5\1\0\10\5"+
    "\1\0\1\145\14\5\1\0\1\5\24\0\3\5\4\0"+
    "\1\5\7\0\1\5\1\146\6\5\1\0\10\5\1\0"+
    "\1\147\1\150\1\5\1\151\11\5\1\0\1\5\24\0"+
    "\3\5\4\0\1\152\7\0\6\5\1\153\1\5\1\0"+
    "\10\5\1\0\3\5\1\154\2\5\1\155\6\5\1\0"+
    "\1\5\24\0\3\5\4\0\1\5\7\0\4\5\1\156"+
    "\3\5\1\0\10\5\1\0\1\5\1\157\10\5\1\160"+
    "\2\5\1\0\1\5\24\0\3\5\4\0\1\5\7\0"+
    "\3\5\1\161\1\162\3\5\1\0\10\5\1\0\15\5"+
    "\1\0\1\5\24\0\3\5\4\0\1\5\7\0\5\5"+
    "\1\163\2\5\1\0\1\5\1\164\6\5\1\0\15\5"+
    "\1\0\1\5\55\0\1\165\4\0\1\166\10\0\1\167"+
    "\2\0\1\170\111\0\1\171\103\0\1\172\103\0\1\173"+
    "\1\0\1\174\101\0\1\175\2\0\1\176\100\0\1\177"+
    "\3\0\1\200\77\0\1\201\103\0\1\202\17\0\1\63"+
    "\1\203\1\204\101\63\10\64\1\205\73\64\13\0\1\206"+
    "\26\0\1\206\4\0\1\206\45\0\2\67\6\0\12\67"+
    "\55\0\3\5\4\0\1\5\7\0\10\5\1\0\10\5"+
    "\1\0\6\5\1\207\6\5\1\0\1\5\24\0\4\73"+
    "\2\0\2\73\1\0\3\73\1\75\2\0\10\73\1\0"+
    "\10\73\1\0\15\73\1\0\1\73\104\0\1\210\25\0"+
    "\1\77\14\0\1\77\13\0\1\77\3\0\1\114\6\0"+
    "\1\114\37\0\1\77\14\0\1\100\13\0\1\100\3\0"+
    "\1\114\6\0\1\114\51\0\1\211\43\0\1\212\40\0"+
    "\1\213\73\0\2\105\6\0\12\105\66\0\1\107\5\0"+
    "\1\110\13\0\1\110\3\0\1\114\6\0\1\114\66\0"+
    "\2\214\101\0\1\214\72\0\4\215\10\0\1\215\1\0"+
    "\3\215\3\0\1\215\2\0\1\215\37\0\1\216\7\0"+
    "\1\217\4\0\1\216\13\0\1\216\4\0\1\217\43\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\10\5\1\0"+
    "\5\5\1\220\7\5\1\0\1\5\24\0\3\5\4\0"+
    "\1\5\7\0\10\5\1\0\10\5\1\0\1\221\14\5"+
    "\1\0\1\5\24\0\3\5\4\0\1\5\7\0\10\5"+
    "\1\0\10\5\1\0\1\5\1\222\13\5\1\0\1\5"+
    "\24\0\3\5\4\0\1\5\7\0\5\5\1\223\2\5"+
    "\1\0\10\5\1\0\15\5\1\0\1\5\24\0\3\5"+
    "\4\0\1\5\7\0\10\5\1\0\10\5\1\0\1\224"+
    "\14\5\1\0\1\5\24\0\3\5\4\0\1\225\7\0"+
    "\10\5\1\0\10\5\1\0\15\5\1\0\1\5\24\0"+
    "\3\5\4\0\1\5\7\0\6\5\1\226\1\5\1\0"+
    "\10\5\1\0\15\5\1\0\1\5\24\0\3\5\4\0"+
    "\1\5\7\0\10\5\1\0\1\5\1\227\6\5\1\0"+
    "\15\5\1\0\1\5\24\0\3\5\4\0\1\5\7\0"+
    "\10\5\1\0\10\5\1\0\6\5\1\230\6\5\1\0"+
    "\1\5\24\0\3\5\4\0\1\5\7\0\10\5\1\0"+
    "\10\5\1\0\7\5\1\231\5\5\1\0\1\5\24\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\10\5\1\0"+
    "\11\5\1\232\3\5\1\0\1\5\24\0\3\5\4\0"+
    "\1\5\7\0\10\5\1\0\10\5\1\0\6\5\1\233"+
    "\6\5\1\0\1\5\24\0\3\5\4\0\1\5\7\0"+
    "\5\5\1\234\2\5\1\0\10\5\1\0\15\5\1\0"+
    "\1\5\24\0\3\5\4\0\1\5\7\0\10\5\1\0"+
    "\10\5\1\0\1\235\14\5\1\0\1\5\24\0\3\5"+
    "\4\0\1\5\7\0\10\5\1\0\10\5\1\0\3\5"+
    "\1\236\11\5\1\0\1\5\24\0\3\5\4\0\1\5"+
    "\7\0\10\5\1\0\10\5\1\0\3\5\1\237\11\5"+
    "\1\0\1\5\24\0\3\5\4\0\1\5\7\0\4\5"+
    "\1\240\3\5\1\0\10\5\1\0\15\5\1\0\1\5"+
    "\26\0\1\136\14\0\1\136\10\0\1\111\2\112\1\136"+
    "\50\0\3\5\4\0\1\5\7\0\6\5\1\241\1\5"+
    "\1\0\10\5\1\0\15\5\1\0\1\5\24\0\3\5"+
    "\4\0\1\5\7\0\10\5\1\0\1\5\1\242\6\5"+
    "\1\0\15\5\1\0\1\5\24\0\3\5\4\0\1\5"+
    "\7\0\3\5\1\243\4\5\1\0\10\5\1\0\1\5"+
    "\1\244\13\5\1\0\1\5\24\0\3\5\4\0\1\5"+
    "\7\0\10\5\1\0\10\5\1\0\5\5\1\245\7\5"+
    "\1\0\1\5\24\0\3\5\4\0\1\5\7\0\4\5"+
    "\1\246\3\5\1\0\10\5\1\0\15\5\1\0\1\5"+
    "\24\0\3\5\4\0\1\5\7\0\10\5\1\0\10\5"+
    "\1\0\4\5\1\247\10\5\1\0\1\5\24\0\3\5"+
    "\4\0\1\5\7\0\4\5\1\250\3\5\1\0\10\5"+
    "\1\0\1\5\1\251\13\5\1\0\1\5\24\0\3\5"+
    "\4\0\1\5\7\0\1\5\1\252\6\5\1\0\10\5"+
    "\1\0\15\5\1\0\1\5\24\0\3\5\4\0\1\5"+
    "\7\0\1\5\1\253\6\5\1\0\10\5\1\0\15\5"+
    "\1\0\1\5\24\0\3\5\4\0\1\5\7\0\10\5"+
    "\1\0\10\5\1\0\6\5\1\254\6\5\1\0\1\5"+
    "\24\0\3\5\4\0\1\5\7\0\1\5\1\255\3\5"+
    "\1\256\2\5\1\0\10\5\1\0\15\5\1\0\1\5"+
    "\24\0\3\5\4\0\1\5\7\0\10\5\1\0\10\5"+
    "\1\0\1\257\14\5\1\0\1\5\24\0\3\5\4\0"+
    "\1\5\7\0\10\5\1\0\10\5\1\0\14\5\1\260"+
    "\1\0\1\5\24\0\3\5\4\0\1\5\7\0\10\5"+
    "\1\0\1\5\1\261\6\5\1\0\15\5\1\0\1\5"+
    "\24\0\3\5\4\0\1\5\7\0\10\5\1\0\10\5"+
    "\1\0\4\5\1\262\10\5\1\0\1\5\24\0\3\5"+
    "\4\0\1\5\7\0\6\5\1\263\1\5\1\0\10\5"+
    "\1\0\15\5\1\0\1\5\24\0\3\5\4\0\1\5"+
    "\7\0\6\5\1\264\1\5\1\0\10\5\1\0\11\5"+
    "\1\265\3\5\1\0\1\5\24\0\3\5\4\0\1\5"+
    "\7\0\10\5\1\0\10\5\1\0\1\266\5\5\1\267"+
    "\6\5\1\0\1\5\24\0\3\5\4\0\1\5\7\0"+
    "\2\5\1\270\5\5\1\0\10\5\1\0\15\5\1\0"+
    "\1\5\47\0\1\271\126\0\1\272\60\0\1\273\24\0"+
    "\1\274\57\0\1\275\137\0\1\276\21\0\1\204\101\0"+
    "\7\64\1\277\1\300\73\64\4\0\3\5\4\0\1\5"+
    "\7\0\10\5\1\0\10\5\1\0\1\5\1\301\13\5"+
    "\1\0\1\5\104\0\1\302\25\0\1\215\14\0\4\215"+
    "\5\0\1\111\2\112\1\215\1\0\3\215\3\0\1\215"+
    "\2\0\1\215\37\0\1\216\14\0\1\216\13\0\1\216"+
    "\50\0\3\5\4\0\1\5\7\0\1\5\1\303\6\5"+
    "\1\0\10\5\1\0\15\5\1\0\1\5\24\0\3\5"+
    "\4\0\1\5\7\0\10\5\1\0\10\5\1\0\1\5"+
    "\1\304\13\5\1\0\1\5\24\0\3\5\4\0\1\5"+
    "\7\0\10\5\1\0\10\5\1\0\4\5\1\305\10\5"+
    "\1\0\1\5\24\0\3\5\4\0\1\5\7\0\1\5"+
    "\1\306\6\5\1\0\10\5\1\0\15\5\1\0\1\5"+
    "\24\0\3\5\4\0\1\5\7\0\10\5\1\0\1\5"+
    "\1\307\6\5\1\0\15\5\1\0\1\5\24\0\3\5"+
    "\4\0\1\5\7\0\10\5\1\0\10\5\1\0\5\5"+
    "\1\310\7\5\1\0\1\5\24\0\3\5\4\0\1\5"+
    "\7\0\10\5\1\0\10\5\1\0\4\5\1\311\10\5"+
    "\1\0\1\5\24\0\3\5\4\0\1\5\7\0\10\5"+
    "\1\0\10\5\1\0\11\5\1\312\3\5\1\0\1\5"+
    "\24\0\3\5\4\0\1\5\7\0\10\5\1\0\10\5"+
    "\1\0\5\5\1\313\7\5\1\0\1\5\24\0\3\5"+
    "\4\0\1\5\7\0\10\5\1\0\6\5\1\314\1\5"+
    "\1\0\15\5\1\0\1\5\24\0\3\5\4\0\1\5"+
    "\7\0\6\5\1\315\1\5\1\0\10\5\1\0\15\5"+
    "\1\0\1\5\24\0\3\5\4\0\1\5\7\0\4\5"+
    "\1\316\3\5\1\0\10\5\1\0\15\5\1\0\1\5"+
    "\24\0\3\5\4\0\1\5\7\0\1\5\1\317\6\5"+
    "\1\0\10\5\1\0\15\5\1\0\1\5\24\0\3\5"+
    "\4\0\1\5\7\0\10\5\1\0\10\5\1\0\1\320"+
    "\14\5\1\0\1\5\24\0\3\5\4\0\1\5\7\0"+
    "\6\5\1\321\1\5\1\0\10\5\1\0\15\5\1\0"+
    "\1\5\24\0\3\5\4\0\1\5\7\0\10\5\1\0"+
    "\10\5\1\0\5\5\1\322\7\5\1\0\1\5\24\0"+
    "\3\5\4\0\1\5\7\0\2\5\1\323\5\5\1\0"+
    "\10\5\1\0\15\5\1\0\1\5\24\0\3\5\4\0"+
    "\1\5\7\0\1\5\1\324\6\5\1\0\10\5\1\0"+
    "\15\5\1\0\1\5\24\0\3\5\4\0\1\5\7\0"+
    "\10\5\1\0\10\5\1\0\5\5\1\325\7\5\1\0"+
    "\1\5\24\0\3\5\4\0\1\5\7\0\5\5\1\326"+
    "\2\5\1\0\10\5\1\0\15\5\1\0\1\5\24\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\10\5\1\0"+
    "\10\5\1\327\4\5\1\0\1\5\24\0\3\5\4\0"+
    "\1\5\7\0\10\5\1\0\10\5\1\0\5\5\1\330"+
    "\7\5\1\0\1\5\24\0\3\5\4\0\1\5\7\0"+
    "\6\5\1\331\1\5\1\0\10\5\1\0\4\5\1\332"+
    "\10\5\1\0\1\5\24\0\3\5\4\0\1\5\7\0"+
    "\10\5\1\0\10\5\1\0\1\333\14\5\1\0\1\5"+
    "\24\0\3\5\4\0\1\5\7\0\10\5\1\0\10\5"+
    "\1\0\4\5\1\334\10\5\1\0\1\5\24\0\3\5"+
    "\4\0\1\5\7\0\5\5\1\335\2\5\1\0\10\5"+
    "\1\0\15\5\1\0\1\5\24\0\3\5\4\0\1\5"+
    "\7\0\6\5\1\336\1\5\1\0\10\5\1\0\15\5"+
    "\1\0\1\5\24\0\3\5\4\0\1\5\7\0\6\5"+
    "\1\337\1\5\1\0\10\5\1\0\15\5\1\0\1\5"+
    "\24\0\3\5\4\0\1\5\7\0\10\5\1\0\1\5"+
    "\1\340\6\5\1\0\6\5\1\341\6\5\1\0\1\5"+
    "\24\0\3\5\4\0\1\5\7\0\5\5\1\342\2\5"+
    "\1\0\10\5\1\0\15\5\1\0\1\5\24\0\3\5"+
    "\4\0\1\5\7\0\10\5\1\0\10\5\1\0\5\5"+
    "\1\343\7\5\1\0\1\5\24\0\3\5\4\0\1\5"+
    "\7\0\10\5\1\0\10\5\1\0\7\5\1\344\5\5"+
    "\1\0\1\5\24\0\3\5\4\0\1\5\7\0\10\5"+
    "\1\0\10\5\1\0\5\5\1\345\7\5\1\0\1\5"+
    "\24\0\3\5\4\0\1\5\7\0\10\5\1\0\10\5"+
    "\1\0\5\5\1\346\7\5\1\0\1\5\24\0\3\5"+
    "\4\0\1\5\7\0\10\5\1\0\1\5\1\347\6\5"+
    "\1\0\15\5\1\0\1\5\24\0\3\5\4\0\1\5"+
    "\7\0\6\5\1\350\1\5\1\0\10\5\1\0\15\5"+
    "\1\0\1\5\24\0\3\5\4\0\1\5\7\0\7\5"+
    "\1\351\1\0\10\5\1\0\15\5\1\0\1\5\24\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\10\5\1\0"+
    "\1\5\1\352\13\5\1\0\1\5\62\0\1\353\67\0"+
    "\1\354\124\0\1\355\112\0\1\356\72\0\1\357\36\0"+
    "\10\64\1\360\73\64\4\0\3\5\4\0\1\5\7\0"+
    "\10\5\1\0\10\5\1\0\5\5\1\361\7\5\1\0"+
    "\1\5\24\0\3\5\4\0\1\5\7\0\10\5\1\0"+
    "\10\5\1\0\13\5\1\362\1\5\1\0\1\5\24\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\10\5\1\0"+
    "\5\5\1\363\7\5\1\0\1\5\24\0\3\5\4\0"+
    "\1\5\7\0\6\5\1\364\1\5\1\0\10\5\1\0"+
    "\15\5\1\0\1\5\24\0\3\5\4\0\1\5\7\0"+
    "\5\5\1\365\2\5\1\0\10\5\1\0\15\5\1\0"+
    "\1\5\24\0\3\5\4\0\1\5\7\0\10\5\1\0"+
    "\10\5\1\0\1\5\1\366\13\5\1\0\1\5\24\0"+
    "\3\5\4\0\1\5\7\0\4\5\1\367\3\5\1\0"+
    "\10\5\1\0\15\5\1\0\1\5\24\0\3\5\4\0"+
    "\1\5\7\0\10\5\1\0\1\5\1\370\6\5\1\0"+
    "\15\5\1\0\1\5\24\0\3\5\4\0\1\5\7\0"+
    "\10\5\1\0\10\5\1\0\10\5\1\371\4\5\1\0"+
    "\1\5\24\0\3\5\4\0\1\5\7\0\5\5\1\372"+
    "\2\5\1\0\10\5\1\0\15\5\1\0\1\5\24\0"+
    "\3\5\4\0\1\5\7\0\5\5\1\373\2\5\1\0"+
    "\10\5\1\0\15\5\1\0\1\5\24\0\3\5\4\0"+
    "\1\5\7\0\6\5\1\374\1\5\1\0\10\5\1\0"+
    "\15\5\1\0\1\5\24\0\3\5\4\0\1\5\7\0"+
    "\10\5\1\0\10\5\1\0\1\5\1\375\13\5\1\0"+
    "\1\5\24\0\3\5\4\0\1\5\7\0\10\5\1\0"+
    "\1\5\1\376\6\5\1\0\15\5\1\0\1\5\24\0"+
    "\3\5\4\0\1\5\7\0\6\5\1\377\1\5\1\0"+
    "\10\5\1\0\15\5\1\0\1\5\24\0\3\5\4\0"+
    "\1\5\7\0\1\5\1\u0100\6\5\1\0\10\5\1\0"+
    "\15\5\1\0\1\5\24\0\3\5\4\0\1\5\7\0"+
    "\10\5\1\0\10\5\1\0\6\5\1\u0101\6\5\1\0"+
    "\1\5\24\0\3\5\4\0\1\5\7\0\6\5\1\u0102"+
    "\1\5\1\0\10\5\1\0\15\5\1\0\1\5\24\0"+
    "\3\5\4\0\1\5\7\0\5\5\1\u0103\2\5\1\0"+
    "\10\5\1\0\15\5\1\0\1\5\24\0\3\5\4\0"+
    "\1\5\7\0\10\5\1\0\10\5\1\0\4\5\1\u0104"+
    "\10\5\1\0\1\5\24\0\3\5\4\0\1\5\7\0"+
    "\10\5\1\0\10\5\1\0\2\5\1\u0105\12\5\1\0"+
    "\1\5\24\0\3\5\4\0\1\5\7\0\10\5\1\0"+
    "\10\5\1\0\6\5\1\u0106\6\5\1\0\1\5\24\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\10\5\1\0"+
    "\2\5\1\u0107\12\5\1\0\1\5\24\0\3\5\4\0"+
    "\1\5\7\0\4\5\1\u0108\3\5\1\0\10\5\1\0"+
    "\2\5\1\u0109\12\5\1\0\1\5\24\0\3\5\4\0"+
    "\1\5\7\0\6\5\1\u010a\1\5\1\0\10\5\1\0"+
    "\15\5\1\0\1\5\24\0\3\5\4\0\1\5\7\0"+
    "\10\5\1\0\10\5\1\0\1\u010b\14\5\1\0\1\5"+
    "\24\0\3\5\4\0\1\5\7\0\5\5\1\u010c\2\5"+
    "\1\0\10\5\1\0\15\5\1\0\1\5\24\0\3\5"+
    "\4\0\1\5\7\0\6\5\1\u010d\1\5\1\0\10\5"+
    "\1\0\15\5\1\0\1\5\24\0\3\5\4\0\1\5"+
    "\7\0\10\5\1\0\10\5\1\0\5\5\1\u010e\7\5"+
    "\1\0\1\5\24\0\3\5\4\0\1\5\7\0\1\5"+
    "\1\u010f\6\5\1\0\10\5\1\0\15\5\1\0\1\5"+
    "\24\0\3\5\4\0\1\5\7\0\10\5\1\0\10\5"+
    "\1\0\6\5\1\u0110\6\5\1\0\1\5\72\0\1\u0111"+
    "\104\0\1\u0112\76\0\1\u0113\102\0\1\u0114\114\0\1\u0115"+
    "\25\0\7\64\1\u0116\1\360\73\64\4\0\3\5\4\0"+
    "\1\5\7\0\4\5\1\u0117\3\5\1\0\10\5\1\0"+
    "\15\5\1\0\1\5\24\0\3\5\4\0\1\5\7\0"+
    "\1\5\1\u0118\6\5\1\0\10\5\1\0\15\5\1\0"+
    "\1\5\24\0\3\5\4\0\1\5\7\0\1\5\1\u0119"+
    "\6\5\1\0\10\5\1\0\15\5\1\0\1\5\24\0"+
    "\3\5\4\0\1\5\7\0\1\5\1\u011a\6\5\1\0"+
    "\10\5\1\0\15\5\1\0\1\5\24\0\3\5\4\0"+
    "\1\5\7\0\6\5\1\u011b\1\5\1\0\10\5\1\0"+
    "\15\5\1\0\1\5\24\0\3\5\4\0\1\5\7\0"+
    "\10\5\1\0\10\5\1\0\6\5\1\u011c\6\5\1\0"+
    "\1\5\24\0\3\5\4\0\1\5\7\0\10\5\1\0"+
    "\10\5\1\0\5\5\1\u011d\7\5\1\0\1\5\24\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\10\5\1\0"+
    "\1\5\1\u011e\13\5\1\0\1\5\24\0\3\5\4\0"+
    "\1\5\7\0\10\5\1\0\10\5\1\0\5\5\1\u011f"+
    "\7\5\1\0\1\5\24\0\3\5\4\0\1\5\7\0"+
    "\6\5\1\u0120\1\5\1\0\10\5\1\0\15\5\1\0"+
    "\1\5\24\0\3\5\4\0\1\5\7\0\4\5\1\u0121"+
    "\3\5\1\0\10\5\1\0\15\5\1\0\1\5\24\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\10\5\1\0"+
    "\3\5\1\u0122\11\5\1\0\1\5\24\0\3\5\4\0"+
    "\1\5\7\0\10\5\1\0\10\5\1\0\2\5\1\u0123"+
    "\12\5\1\0\1\5\24\0\3\5\4\0\1\5\7\0"+
    "\6\5\1\u0124\1\5\1\0\10\5\1\0\15\5\1\0"+
    "\1\5\24\0\3\5\4\0\1\5\7\0\10\5\1\0"+
    "\10\5\1\0\10\5\1\u0125\4\5\1\0\1\5\24\0"+
    "\3\5\4\0\1\5\7\0\6\5\1\u0126\1\5\1\0"+
    "\10\5\1\0\15\5\1\0\1\5\24\0\3\5\4\0"+
    "\1\5\7\0\3\5\1\u0127\4\5\1\0\10\5\1\0"+
    "\15\5\1\0\1\5\24\0\3\5\4\0\1\5\7\0"+
    "\4\5\1\u0128\3\5\1\0\10\5\1\0\15\5\1\0"+
    "\1\5\24\0\3\5\4\0\1\5\7\0\10\5\1\0"+
    "\10\5\1\0\2\5\1\u0129\12\5\1\0\1\5\24\0"+
    "\3\5\4\0\1\5\7\0\6\5\1\u012a\1\5\1\0"+
    "\10\5\1\0\15\5\1\0\1\5\24\0\3\5\4\0"+
    "\1\5\7\0\10\5\1\0\10\5\1\0\2\5\1\u012b"+
    "\12\5\1\0\1\5\46\0\1\u012c\104\0\1\u012d\111\0"+
    "\1\u012e\76\0\1\u012f\125\0\1\u0130\35\0\3\5\4\0"+
    "\1\5\7\0\6\5\1\u0131\1\5\1\0\10\5\1\0"+
    "\15\5\1\0\1\5\24\0\3\5\4\0\1\5\7\0"+
    "\10\5\1\0\10\5\1\0\7\5\1\u0132\5\5\1\0"+
    "\1\5\24\0\3\5\4\0\1\5\7\0\10\5\1\0"+
    "\10\5\1\0\1\5\1\u0133\13\5\1\0\1\5\24\0"+
    "\3\5\4\0\1\5\7\0\10\5\1\0\10\5\1\0"+
    "\7\5\1\u0134\5\5\1\0\1\5\24\0\3\5\4\0"+
    "\1\5\7\0\6\5\1\u0135\1\5\1\0\10\5\1\0"+
    "\15\5\1\0\1\5\24\0\3\5\4\0\1\5\7\0"+
    "\10\5\1\0\10\5\1\0\1\u0136\14\5\1\0\1\5"+
    "\24\0\3\5\4\0\1\5\7\0\10\5\1\0\1\5"+
    "\1\u0137\6\5\1\0\15\5\1\0\1\5\24\0\3\5"+
    "\4\0\1\5\7\0\6\5\1\u0138\1\5\1\0\10\5"+
    "\1\0\15\5\1\0\1\5\24\0\3\5\4\0\1\5"+
    "\7\0\10\5\1\0\10\5\1\0\5\5\1\u0139\7\5"+
    "\1\0\1\5\72\0\1\u013a\73\0\1\u013b\72\0\1\u013c"+
    "\102\0\1\u013d\57\0\3\5\4\0\1\5\7\0\10\5"+
    "\1\0\10\5\1\0\5\5\1\u013e\7\5\1\0\1\5"+
    "\24\0\3\5\4\0\1\5\7\0\10\5\1\0\10\5"+
    "\1\0\5\5\1\u013f\7\5\1\0\1\5\24\0\3\5"+
    "\4\0\1\5\7\0\10\5\1\0\10\5\1\0\5\5"+
    "\1\u0140\7\5\1\0\1\5\24\0\3\5\4\0\1\5"+
    "\7\0\5\5\1\u0141\2\5\1\0\10\5\1\0\15\5"+
    "\1\0\1\5\24\0\3\5\4\0\1\5\7\0\10\5"+
    "\1\0\10\5\1\0\5\5\1\u0142\7\5\1\0\1\5"+
    "\24\0\3\5\4\0\1\5\7\0\10\5\1\0\10\5"+
    "\1\0\5\5\1\u0143\7\5\1\0\1\5\72\0\1\u0144"+
    "\62\0\1\u0145\56\0\3\5\4\0\1\5\7\0\10\5"+
    "\1\0\6\5\1\u0146\1\5\1\0\15\5\1\0\1\5"+
    "\103\0\1\u0147\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15980];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\14\1\1\11\32\1\11\11\1\1\1\0"+
    "\2\11\1\0\1\1\1\0\1\1\1\0\1\1\2\11"+
    "\1\0\1\1\2\11\1\1\1\11\4\0\2\1\2\0"+
    "\25\1\2\11\21\1\4\0\7\11\1\1\2\11\1\1"+
    "\1\11\1\0\1\11\1\1\1\11\1\1\3\11\2\1"+
    "\1\0\51\1\5\0\2\11\1\0\1\1\1\11\50\1"+
    "\6\0\40\1\5\0\26\1\1\11\4\0\11\1\1\11"+
    "\1\0\1\11\1\0\6\1\1\11\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MQL4Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return MQL4Elements.BAD_CHARACTER;
            }
          case 113: break;
          case 2: 
            { return MQL4Elements.LINE_TERMINATOR;
            }
          case 114: break;
          case 3: 
            { return MQL4Elements.WHITE_SPACE;
            }
          case 115: break;
          case 4: 
            { return MQL4Elements.IDENTIFIER;
            }
          case 116: break;
          case 5: 
            { return MQL4Elements.DIV;
            }
          case 117: break;
          case 6: 
            { return MQL4Elements.MUL;
            }
          case 118: break;
          case 7: 
            { return MQL4Elements.LT;
            }
          case 119: break;
          case 8: 
            { return MQL4Elements.DOT;
            }
          case 120: break;
          case 9: 
            { return MQL4Elements.MINUS;
            }
          case 121: break;
          case 10: 
            { return MQL4Elements.GT;
            }
          case 122: break;
          case 11: 
            { return MQL4Elements.QUESTION;
            }
          case 123: break;
          case 12: 
            { return MQL4Elements.INTEGER_LITERAL;
            }
          case 124: break;
          case 13: 
            { return MQL4Elements.PLUS;
            }
          case 125: break;
          case 14: 
            { return MQL4Elements.EQ;
            }
          case 126: break;
          case 15: 
            { return MQL4Elements.MOD;
            }
          case 127: break;
          case 16: 
            { return MQL4Elements.AND;
            }
          case 128: break;
          case 17: 
            { return MQL4Elements.OR;
            }
          case 129: break;
          case 18: 
            { return MQL4Elements.XOR;
            }
          case 130: break;
          case 19: 
            { return MQL4Elements.TILDA;
            }
          case 131: break;
          case 20: 
            { return MQL4Elements.NOT;
            }
          case 132: break;
          case 21: 
            { return MQL4Elements.LPARENTH;
            }
          case 133: break;
          case 22: 
            { return MQL4Elements.RPARENTH;
            }
          case 134: break;
          case 23: 
            { return MQL4Elements.LBRACE;
            }
          case 135: break;
          case 24: 
            { return MQL4Elements.RBRACE;
            }
          case 136: break;
          case 25: 
            { return MQL4Elements.LBRACKET;
            }
          case 137: break;
          case 26: 
            { return MQL4Elements.RBRACKET;
            }
          case 138: break;
          case 27: 
            { return MQL4Elements.SEMICOLON;
            }
          case 139: break;
          case 28: 
            { return MQL4Elements.COLON;
            }
          case 140: break;
          case 29: 
            { return MQL4Elements.COMMA;
            }
          case 141: break;
          case 30: 
            { return MQL4Elements.LINE_COMMENT;
            }
          case 142: break;
          case 31: 
            { return MQL4Elements.DIV_EQ;
            }
          case 143: break;
          case 32: 
            { return MQL4Elements.MUL_EQ;
            }
          case 144: break;
          case 33: 
            { return MQL4Elements.STRING_LITERAL;
            }
          case 145: break;
          case 34: 
            { return MQL4Elements.SH_LEFT;
            }
          case 146: break;
          case 35: 
            { return MQL4Elements.INCLUDE_STRING_LITERAL;
            }
          case 147: break;
          case 36: 
            { return MQL4Elements.LESS_EQ;
            }
          case 148: break;
          case 37: 
            { return MQL4Elements.DOUBLE_LITERAL;
            }
          case 149: break;
          case 38: 
            { return MQL4Elements.MINUS_MINUS;
            }
          case 150: break;
          case 39: 
            { return MQL4Elements.MINUS_EQ;
            }
          case 151: break;
          case 40: 
            { return MQL4Elements.SH_RIGHT;
            }
          case 152: break;
          case 41: 
            { return MQL4Elements.GT_EQ;
            }
          case 153: break;
          case 42: 
            { return MQL4Elements.DO_KEYWORD;
            }
          case 154: break;
          case 43: 
            { return MQL4Elements.PLUS_PLUS;
            }
          case 155: break;
          case 44: 
            { return MQL4Elements.PLUS_EQ;
            }
          case 156: break;
          case 45: 
            { return MQL4Elements.IF_KEYWORD;
            }
          case 157: break;
          case 46: 
            { return MQL4Elements.EQ_EQ;
            }
          case 158: break;
          case 47: 
            { return MQL4Elements.MOD_EQ;
            }
          case 159: break;
          case 48: 
            { return MQL4Elements.AND_EQ;
            }
          case 160: break;
          case 49: 
            { return MQL4Elements.BOOL_AND;
            }
          case 161: break;
          case 50: 
            { return MQL4Elements.OR_EQ;
            }
          case 162: break;
          case 51: 
            { return MQL4Elements.BOOL_OR;
            }
          case 163: break;
          case 52: 
            { return MQL4Elements.XOR_EQ;
            }
          case 164: break;
          case 53: 
            { return MQL4Elements.POW;
            }
          case 165: break;
          case 54: 
            { return MQL4Elements.TILDA_EQ;
            }
          case 166: break;
          case 55: 
            { return MQL4Elements.NOT_EQ;
            }
          case 167: break;
          case 56: 
            { return MQL4Elements.SH_LEFT_EQ;
            }
          case 168: break;
          case 57: 
            { return MQL4Elements.USH_RIGHT;
            }
          case 169: break;
          case 58: 
            { return MQL4Elements.SH_RIGHT_EQ;
            }
          case 170: break;
          case 59: 
            { return MQL4Elements.CHAR_LITERAL;
            }
          case 171: break;
          case 60: 
            { return MQL4Elements.FOR_KEYWORD;
            }
          case 172: break;
          case 61: 
            { return MQL4Elements.NEW_KEYWORD;
            }
          case 173: break;
          case 62: 
            { return MQL4Elements.INT_KEYWORD;
            }
          case 174: break;
          case 63: 
            { return MQL4Elements.POW_EQ;
            }
          case 175: break;
          case 64: 
            { return MQL4Elements.BLOCK_COMMENT;
            }
          case 176: break;
          case 65: 
            { return MQL4Elements.USH_RIGHT_EQ;
            }
          case 177: break;
          case 66: 
            { return MQL4Elements.BOOL_KEYWORD;
            }
          case 178: break;
          case 67: 
            { return MQL4Elements.TRUE_KEYWORD;
            }
          case 179: break;
          case 68: 
            { return MQL4Elements.THIS_KEYWORD;
            }
          case 180: break;
          case 69: 
            { return MQL4Elements.VOID_KEYWORD;
            }
          case 181: break;
          case 70: 
            { return MQL4Elements.UINT_KEYWORD;
            }
          case 182: break;
          case 71: 
            { return MQL4Elements.LONG_KEYWORD;
            }
          case 183: break;
          case 72: 
            { return MQL4Elements.CASE_KEYWORD;
            }
          case 184: break;
          case 73: 
            { return MQL4Elements.CHAR_KEYWORD;
            }
          case 185: break;
          case 74: 
            { return MQL4Elements.ENUM_KEYWORD;
            }
          case 186: break;
          case 75: 
            { return MQL4Elements.ELSE_KEYWORD;
            }
          case 187: break;
          case 76: 
            { return MQL4Elements.WHILE_KEYWORD;
            }
          case 188: break;
          case 77: 
            { return MQL4Elements.BREAK_KEYWORD;
            }
          case 189: break;
          case 78: 
            { return MQL4Elements.FALSE_KEYWORD;
            }
          case 190: break;
          case 79: 
            { return MQL4Elements.FLOAT_KEYWORD;
            }
          case 191: break;
          case 80: 
            { return MQL4Elements.ULONG_KEYWORD;
            }
          case 192: break;
          case 81: 
            { return MQL4Elements.UCHAR_KEYWORD;
            }
          case 193: break;
          case 82: 
            { return MQL4Elements.CONST_KEYWORD;
            }
          case 194: break;
          case 83: 
            { return MQL4Elements.COLOR_KEYWORD;
            }
          case 195: break;
          case 84: 
            { return MQL4Elements.CLASS_KEYWORD;
            }
          case 196: break;
          case 85: 
            { return MQL4Elements.SHORT_KEYWORD;
            }
          case 197: break;
          case 86: 
            { return MQL4Elements.INPUT_KEYWORD;
            }
          case 198: break;
          case 87: 
            { return MQL4Elements.RETURN_KEYWORD;
            }
          case 199: break;
          case 88: 
            { return MQL4Elements.USHORT_KEYWORD;
            }
          case 200: break;
          case 89: 
            { return MQL4Elements.DOUBLE_KEYWORD;
            }
          case 201: break;
          case 90: 
            { return MQL4Elements.DELETE_KEYWORD;
            }
          case 202: break;
          case 91: 
            { return MQL4Elements.SWITCH_KEYWORD;
            }
          case 203: break;
          case 92: 
            { return MQL4Elements.STATIC_KEYWORD;
            }
          case 204: break;
          case 93: 
            { return MQL4Elements.STRUCT_KEYWORD;
            }
          case 205: break;
          case 94: 
            { return MQL4Elements.STRING_KEYWORD;
            }
          case 206: break;
          case 95: 
            { return MQL4Elements.STRICT_KEYWORD;
            }
          case 207: break;
          case 96: 
            { return MQL4Elements.SIZEOF_KEYWORD;
            }
          case 208: break;
          case 97: 
            { return MQL4Elements.EXTERN_KEYWORD;
            }
          case 209: break;
          case 98: 
            { return MQL4Elements.PUBLIC_KEYWORD;
            }
          case 210: break;
          case 99: 
            { return MQL4Elements.UNDEF_KEYWORD;
            }
          case 211: break;
          case 100: 
            { return MQL4Elements.VIRTUAL_KEYWORD;
            }
          case 212: break;
          case 101: 
            { return MQL4Elements.DEFAULT_KEYWORD;
            }
          case 213: break;
          case 102: 
            { return MQL4Elements.PRIVATE_KEYWORD;
            }
          case 214: break;
          case 103: 
            { return MQL4Elements.DEFINE_KEYWORD;
            }
          case 215: break;
          case 104: 
            { return MQL4Elements.IMPORT_KEYWORD;
            }
          case 216: break;
          case 105: 
            { return MQL4Elements.TEMPLATE_KEYWORD;
            }
          case 217: break;
          case 106: 
            { return MQL4Elements.TYPENAME_KEYWORD;
            }
          case 218: break;
          case 107: 
            { return MQL4Elements.DATETIME_KEYWORD;
            }
          case 219: break;
          case 108: 
            { return MQL4Elements.OPERATOR_KEYWORD;
            }
          case 220: break;
          case 109: 
            { return MQL4Elements.CONTINUE_KEYWORD;
            }
          case 221: break;
          case 110: 
            { return MQL4Elements.INCLUDE_KEYWORD;
            }
          case 222: break;
          case 111: 
            { return MQL4Elements.PROTECTED_KEYWORD;
            }
          case 223: break;
          case 112: 
            { return MQL4Elements.PROPERTY_KEYWORD;
            }
          case 224: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
